{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/dimReduction/dimensionalityReduction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DimensionalityReductionPlot = ({\n  subspaceId,\n  nComponents = 2\n}) => {\n  _s();\n  const [reducedData, setReducedData] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchReducedData = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/dimension_reduce\", {\n          params: {\n            sub_ind: subspaceId,\n            n_components: nComponents\n          }\n        });\n        console.log(\"Dimensionality Reduction Data:\", response.data);\n\n        // Validate response data format\n        if (Array.isArray(response.data)) {\n          setReducedData(response.data);\n        } else {\n          throw new Error(\"Invalid data format from API.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching dimensionality reduction data:\", err);\n        setError(\"Failed to fetch dimensionality reduction data.\");\n      }\n    };\n    if (subspaceId) {\n      fetchReducedData();\n    }\n  }, [subspaceId, nComponents]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  if (!Array.isArray(reducedData) || reducedData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading dimensionality reduction...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  const plotData = reducedData.map(point => ({\n    x: [point.compo_feature0],\n    y: [point.compo_feature1],\n    type: \"scatter\",\n    mode: \"markers\",\n    marker: {\n      size: 10\n    },\n    name: `Class ${point.target}`\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      data: plotData,\n      layout: {\n        title: \"Dimensionality Reduction Plot\",\n        xaxis: {\n          title: \"Component 0\"\n        },\n        yaxis: {\n          title: \"Component 1\"\n        },\n        margin: {\n          t: 50,\n          b: 50\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(DimensionalityReductionPlot, \"bU4jhKTrOwGF263j3o5Cmu8c+4w=\");\n_c = DimensionalityReductionPlot;\nexport default DimensionalityReductionPlot;\nvar _c;\n$RefreshReg$(_c, \"DimensionalityReductionPlot\");","map":{"version":3,"names":["React","useState","useEffect","Plot","axios","jsxDEV","_jsxDEV","DimensionalityReductionPlot","subspaceId","nComponents","_s","reducedData","setReducedData","error","setError","fetchReducedData","response","get","params","sub_ind","n_components","console","log","data","Array","isArray","Error","err","style","color","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","length","plotData","map","point","x","compo_feature0","y","compo_feature1","type","mode","marker","size","name","target","layout","title","xaxis","yaxis","margin","t","b","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/dimReduction/dimensionalityReduction.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\n\nconst DimensionalityReductionPlot = ({ subspaceId, nComponents = 2 }) => {\n  const [reducedData, setReducedData] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchReducedData = async () => {\n      try {\n        const response = await axios.get(\n          \"http://127.0.0.1:5000/dimension_reduce\",\n          { params: { sub_ind: subspaceId, n_components: nComponents } }\n        );\n        console.log(\"Dimensionality Reduction Data:\", response.data);\n\n        // Validate response data format\n        if (Array.isArray(response.data)) {\n          setReducedData(response.data);\n        } else {\n          throw new Error(\"Invalid data format from API.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching dimensionality reduction data:\", err);\n        setError(\"Failed to fetch dimensionality reduction data.\");\n      }\n    };\n\n    if (subspaceId) {\n      fetchReducedData();\n    }\n  }, [subspaceId, nComponents]);\n\n  if (error) {\n    return <p style={{ color: \"red\", textAlign: \"center\" }}>{error}</p>;\n  }\n\n  if (!Array.isArray(reducedData) || reducedData.length === 0) {\n    return <p style={{ textAlign: \"center\" }}>Loading dimensionality reduction...</p>;\n  }\n\n  const plotData = reducedData.map((point) => ({\n    x: [point.compo_feature0],\n    y: [point.compo_feature1],\n    type: \"scatter\",\n    mode: \"markers\",\n    marker: { size: 10 },\n    name: `Class ${point.target}`,\n  }));\n\n  return (\n    <div>\n      <Plot\n        data={plotData}\n        layout={{\n          title: \"Dimensionality Reduction Plot\",\n          xaxis: { title: \"Component 0\" },\n          yaxis: { title: \"Component 1\" },\n          margin: { t: 50, b: 50 },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default DimensionalityReductionPlot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}