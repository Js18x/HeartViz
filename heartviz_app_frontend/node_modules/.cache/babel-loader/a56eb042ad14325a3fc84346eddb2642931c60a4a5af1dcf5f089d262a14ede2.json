{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n\n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//     const margin = { top: 30, right: 80, bottom: 10, left: 50 };\n//     const width = 800 - margin.left - margin.right;\n//     const height = 600 - margin.top - margin.bottom;\n\n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n\n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n\n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 1.5)\n//       .style(\"opacity\", 0.7);\n\n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n\n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width + 20}, 0)`);\n\n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n\n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n\n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n\n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n\n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n\n//     const legendAxis = d3\n//       .axisRight(legendScale)\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n\n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);  \n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import Plot from \"react-plotly.js\";\n\n// // const ParallelCoordinatesPlot = ({ subspaceId }) => {\n// //   const [data, setData] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\n// //           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n// //         );\n// //         const result = await response.json();\n\n// //         if (result.data) {\n// //           setData(result.data);\n// //         } else {\n// //           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n// //         }\n// //       } catch (err) {\n// //         setError(err.message || \"An unknown error occurred.\");\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [subspaceId]);\n\n// //   if (loading) return <div>Loading parallel coordinates plot...</div>;\n// //   if (error) return <div>Error: {error}</div>;\n\n// //   if (!data || Object.keys(data).length === 0) {\n// //     return <div>No data available for the parallel coordinates plot.</div>;\n// //   }\n\n// //   // Extract data for the parallel coordinates plot\n// //   const dimensions = Object.keys(data).map((key) => ({\n// //     label: key,\n// //     values: data[key],\n// //   }));\n\n// //   return (\n// //     <div>\n// //       <h1>Parallel Coordinates Plot</h1>\n// //       <Plot\n// //         data={[\n// //           {\n// //             type: \"parcoords\",\n// //             dimensions,\n// //             line: {\n// //               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n// //               colorscale: \"Viridis\",\n// //               showscale: true,\n// //               width: 100, // Set the line thickness here\n// //             },\n// //           },\n// //         ]}\n// //         layout={{\n// //           title: \"Parallel Coordinates Plot\",\n// //           width: 1200,\n// //           height: 700,\n// //         }}\n// //       />\n// //     </div>\n// //   );\n// // };\n\n// // export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelSetsPlot = ({\n  subspaceId\n}) => {\n  _s();\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(`http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.data) {\n          const rawData = result.data;\n\n          // Format data for Parallel Sets\n          const formattedData = Object.keys(rawData[Object.keys(rawData)[0]]).map((_, i) => Object.fromEntries(Object.entries(rawData).map(([key, values]) => [key, String(values[i]) || \"0\"])));\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [subspaceId]);\n  useEffect(() => {\n    if (!data.length || !dimensions.length) return;\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    const margin = {\n      top: 30,\n      right: 80,\n      bottom: 10,\n      left: 50\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create a sankey-like parallel sets layout\n    const sankey = d3.sankey().nodeWidth(15).nodePadding(10).extent([[1, 1], [width - 1, height - 6]]);\n\n    // Aggregate data for Parallel Sets\n    const nestedData = d3.nest().key(d => d[dimensions[0]]).rollup(values => {\n      const grouped = d3.rollup(values, group => group.length, ...dimensions.slice(1).map(dim => d => d[dim]));\n      return [...grouped.entries()].map(([key, value]) => ({\n        key,\n        value\n      }));\n    }).entries(data);\n    const nodes = [];\n    const links = [];\n\n    // Create nodes and links for Parallel Sets\n    nestedData.forEach((group, i) => {\n      const sourceIndex = nodes.length;\n      nodes.push({\n        name: group.key,\n        level: 0\n      });\n      group.value.forEach(({\n        key,\n        value\n      }) => {\n        const targetIndex = nodes.findIndex(n => n.name === key && n.level === 1);\n        if (targetIndex === -1) {\n          nodes.push({\n            name: key,\n            level: 1\n          });\n          links.push({\n            source: sourceIndex,\n            target: nodes.length - 1,\n            value\n          });\n        } else {\n          links.push({\n            source: sourceIndex,\n            target: targetIndex,\n            value\n          });\n        }\n      });\n    });\n    sankey({\n      nodes,\n      links\n    });\n\n    // Draw nodes\n    svg.append(\"g\").selectAll(\".node\").data(nodes).enter().append(\"rect\").attr(\"class\", \"node\").attr(\"x\", d => d.x0).attr(\"y\", d => d.y0).attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => Math.max(0, d.y1 - d.y0)).style(\"fill\", d => d.level === 0 ? \"steelblue\" : \"orange\");\n\n    // Draw links\n    svg.append(\"g\").selectAll(\".link\").data(links).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", d3.sankeyLinkHorizontal()).style(\"fill\", \"none\").style(\"stroke\", \"grey\").style(\"stroke-opacity\", 0.4).style(\"stroke-width\", d => Math.max(1, d.width));\n  }, [data, dimensions]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Parallel Sets Plot...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 21\n  }, this);\n  if (!data.length || !dimensions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the Parallel Sets Plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n};\n_s(ParallelSetsPlot, \"Ox2DRe/Hwt2QFhyWZ0DWMxrXQ6s=\");\n_c = ParallelSetsPlot;\nexport default ParallelSetsPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelSetsPlot\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","ParallelSetsPlot","subspaceId","_s","containerRef","data","setData","dimensions","setDimensions","loading","setLoading","error","setError","fetchData","Error","response","fetch","result","json","rawData","formattedData","Object","keys","map","_","i","fromEntries","entries","key","values","String","err","message","length","select","current","selectAll","remove","margin","top","right","bottom","left","width","height","svg","append","attr","sankey","nodeWidth","nodePadding","extent","nestedData","nest","d","rollup","grouped","group","slice","dim","value","nodes","links","forEach","sourceIndex","push","name","level","targetIndex","findIndex","n","source","target","enter","x0","y0","x1","Math","max","y1","style","sankeyLinkHorizontal","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n  \n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n  \n//     const margin = { top: 30, right: 80, bottom: 10, left: 50 };\n//     const width = 800 - margin.left - margin.right;\n//     const height = 600 - margin.top - margin.bottom;\n  \n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n  \n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n  \n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n  \n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n  \n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 1.5)\n//       .style(\"opacity\", 0.7);\n  \n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n  \n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width + 20}, 0)`);\n  \n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n  \n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n  \n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n  \n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n  \n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n  \n//     const legendAxis = d3\n//       .axisRight(legendScale)\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n  \n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);  \n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import Plot from \"react-plotly.js\";\n\n// // const ParallelCoordinatesPlot = ({ subspaceId }) => {\n// //   const [data, setData] = useState(null);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\n// //           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n// //         );\n// //         const result = await response.json();\n\n// //         if (result.data) {\n// //           setData(result.data);\n// //         } else {\n// //           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n// //         }\n// //       } catch (err) {\n// //         setError(err.message || \"An unknown error occurred.\");\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [subspaceId]);\n\n// //   if (loading) return <div>Loading parallel coordinates plot...</div>;\n// //   if (error) return <div>Error: {error}</div>;\n\n// //   if (!data || Object.keys(data).length === 0) {\n// //     return <div>No data available for the parallel coordinates plot.</div>;\n// //   }\n\n// //   // Extract data for the parallel coordinates plot\n// //   const dimensions = Object.keys(data).map((key) => ({\n// //     label: key,\n// //     values: data[key],\n// //   }));\n\n// //   return (\n// //     <div>\n// //       <h1>Parallel Coordinates Plot</h1>\n// //       <Plot\n// //         data={[\n// //           {\n// //             type: \"parcoords\",\n// //             dimensions,\n// //             line: {\n// //               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n// //               colorscale: \"Viridis\",\n// //               showscale: true,\n// //               width: 100, // Set the line thickness here\n// //             },\n// //           },\n// //         ]}\n// //         layout={{\n// //           title: \"Parallel Coordinates Plot\",\n// //           width: 1200,\n// //           height: 700,\n// //         }}\n// //       />\n// //     </div>\n// //   );\n// // };\n\n// // export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst ParallelSetsPlot = ({ subspaceId }) => {\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(\n          `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n\n        if (result.data) {\n          const rawData = result.data;\n\n          // Format data for Parallel Sets\n          const formattedData = Object.keys(\n            rawData[Object.keys(rawData)[0]]\n          ).map((_, i) =>\n            Object.fromEntries(\n              Object.entries(rawData).map(([key, values]) => [\n                key,\n                String(values[i]) || \"0\",\n              ])\n            )\n          );\n\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [subspaceId]);\n\n  useEffect(() => {\n    if (!data.length || !dimensions.length) return;\n\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n\n    const margin = { top: 30, right: 80, bottom: 10, left: 50 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3\n      .select(containerRef.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create a sankey-like parallel sets layout\n    const sankey = d3\n      .sankey()\n      .nodeWidth(15)\n      .nodePadding(10)\n      .extent([\n        [1, 1],\n        [width - 1, height - 6],\n      ]);\n\n    // Aggregate data for Parallel Sets\n    const nestedData = d3\n      .nest()\n      .key((d) => d[dimensions[0]])\n      .rollup((values) => {\n        const grouped = d3.rollup(\n          values,\n          (group) => group.length,\n          ...dimensions.slice(1).map((dim) => (d) => d[dim])\n        );\n        return [...grouped.entries()].map(([key, value]) => ({\n          key,\n          value,\n        }));\n      })\n      .entries(data);\n\n    const nodes = [];\n    const links = [];\n\n    // Create nodes and links for Parallel Sets\n    nestedData.forEach((group, i) => {\n      const sourceIndex = nodes.length;\n      nodes.push({ name: group.key, level: 0 });\n\n      group.value.forEach(({ key, value }) => {\n        const targetIndex = nodes.findIndex(\n          (n) => n.name === key && n.level === 1\n        );\n        if (targetIndex === -1) {\n          nodes.push({ name: key, level: 1 });\n          links.push({\n            source: sourceIndex,\n            target: nodes.length - 1,\n            value,\n          });\n        } else {\n          links.push({\n            source: sourceIndex,\n            target: targetIndex,\n            value,\n          });\n        }\n      });\n    });\n\n    sankey({\n      nodes,\n      links,\n    });\n\n    // Draw nodes\n    svg\n      .append(\"g\")\n      .selectAll(\".node\")\n      .data(nodes)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"node\")\n      .attr(\"x\", (d) => d.x0)\n      .attr(\"y\", (d) => d.y0)\n      .attr(\"width\", (d) => d.x1 - d.x0)\n      .attr(\"height\", (d) => Math.max(0, d.y1 - d.y0))\n      .style(\"fill\", (d) => (d.level === 0 ? \"steelblue\" : \"orange\"));\n\n    // Draw links\n    svg\n      .append(\"g\")\n      .selectAll(\".link\")\n      .data(links)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", d3.sankeyLinkHorizontal())\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", \"grey\")\n      .style(\"stroke-opacity\", 0.4)\n      .style(\"stroke-width\", (d) => Math.max(1, d.width));\n  }, [data, dimensions]);\n\n  if (loading) return <div>Loading Parallel Sets Plot...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!data.length || !dimensions.length) {\n    return <div>No data available for the Parallel Sets Plot.</div>;\n  }\n\n  return (\n    <div>\n      <div ref={containerRef}></div>\n    </div>\n  );\n};\n\nexport default ParallelSetsPlot;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}