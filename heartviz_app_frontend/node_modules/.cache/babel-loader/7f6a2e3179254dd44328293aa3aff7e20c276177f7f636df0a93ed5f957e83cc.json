{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelCoordinatesPlot = ({\n  subspaceId\n}) => {\n  _s();\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(`http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.data) {\n          const rawData = result.data;\n          const formattedData = Object.keys(rawData[Object.keys(rawData)[0]]).map((_, i) => Object.fromEntries(Object.entries(rawData).map(([key, values]) => [key, Number(values[i]) || 0])));\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n          setSelectedDimensions(Object.keys(rawData)); // Default to show all dimensions\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [subspaceId]);\n  useEffect(() => {\n    if (!data.length) return;\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    if (!selectedDimensions.length) {\n      // Render placeholder if no dimensions are selected\n      d3.select(containerRef.current).append(\"text\").attr(\"x\", 200).attr(\"y\", 200).style(\"font-size\", \"16px\").text(\"No dimensions selected. Please select at least one.\");\n      return;\n    }\n    const margin = {\n      top: 30,\n      right: 80,\n      bottom: 10,\n      left: 50\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    const yScales = {};\n    selectedDimensions.forEach(dimension => {\n      yScales[dimension] = d3.scaleLinear().domain(d3.extent(data, d => d[dimension])).range([height, 0]);\n    });\n    const xScale = d3.scalePoint().domain(selectedDimensions).range([0, width]).padding(0.5);\n    const colorScale = d3.scaleSequential(d3.interpolateViridis).domain(d3.extent(data, d => d[selectedDimensions[0]]));\n    svg.selectAll(\".dimension\").data(selectedDimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", d => `translate(${xScale(d)})`).each(function (dimension) {\n      d3.select(this).call(d3.axisLeft(yScales[dimension]).ticks(6)).append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"y\", -9).text(dimension).style(\"fill\", \"black\").style(\"font-size\", \"12px\");\n    });\n    svg.append(\"g\").selectAll(\".path\").data(data).enter().append(\"path\").attr(\"d\", d => d3.line()(selectedDimensions.map(dimension => [xScale(dimension), yScales[dimension](d[dimension])]))).style(\"fill\", \"none\").style(\"stroke\", d => colorScale(d[selectedDimensions[0]])).style(\"stroke-width\", 2).style(\"opacity\", 0.8);\n  }, [data, selectedDimensions]);\n  const toggleDimension = dimension => {\n    setSelectedDimensions(prev => prev.includes(dimension) ? prev.filter(d => d !== dimension) : [...prev, dimension]);\n  };\n  const moveDimension = (fromIndex, toIndex) => {\n    setSelectedDimensions(prev => {\n      const updated = [...prev];\n      const [movedItem] = updated.splice(fromIndex, 1);\n      updated.splice(toIndex, 0, movedItem);\n      return updated;\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Parallel Coordinates Plot...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 21\n  }, this);\n  if (!data.length || !dimensions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the Parallel Coordinates Plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"flex-start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: containerRef,\n        style: {\n          flex: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"200px\",\n          padding: \"10px\",\n          background: \"#f8f9fa\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Reorder & Toggle Dimensions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), dimensions.map((dimension, index) => /*#__PURE__*/_jsxDEV(DimensionItem, {\n          dimension: dimension,\n          index: index,\n          moveDimension: moveDimension,\n          toggleDimension: toggleDimension,\n          selected: selectedDimensions.includes(dimension)\n        }, dimension, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(ParallelCoordinatesPlot, \"s08GBYJx53TFkSmY9BEFCs3OKP4=\");\n_c = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n\n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//     const margin = { top: 30, right: 50, bottom: 10, left: 80 };\n//     const width = 1000 - margin.left - margin.right; // Increased width\n//     const height = 600 - margin.top - margin.bottom;\n\n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n\n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n\n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 2) // Increased line thickness\n//       .style(\"opacity\", 0.8);\n\n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n\n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(-60, 0)`); // Moved legend to the left\n\n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n\n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n\n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n\n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n\n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n\n//     const legendAxis = d3\n//       .axisLeft(legendScale) // Changed to axisLeft\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n\n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth + 5}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);\n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","DndProvider","useDrag","useDrop","HTML5Backend","jsxDEV","_jsxDEV","ParallelCoordinatesPlot","subspaceId","_s","containerRef","data","setData","dimensions","setDimensions","selectedDimensions","setSelectedDimensions","loading","setLoading","error","setError","fetchData","Error","response","fetch","result","json","rawData","formattedData","Object","keys","map","_","i","fromEntries","entries","key","values","Number","err","message","length","select","current","selectAll","remove","append","attr","style","text","margin","top","right","bottom","left","width","height","svg","yScales","forEach","dimension","scaleLinear","domain","extent","d","range","xScale","scalePoint","padding","colorScale","scaleSequential","interpolateViridis","enter","each","call","axisLeft","ticks","line","toggleDimension","prev","includes","filter","moveDimension","fromIndex","toIndex","updated","movedItem","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","backend","display","alignItems","ref","flex","background","border","borderRadius","marginLeft","index","DimensionItem","selected","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst ParallelCoordinatesPlot = ({ subspaceId }) => {\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(\n          `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n\n        if (result.data) {\n          const rawData = result.data;\n\n          const formattedData = Object.keys(\n            rawData[Object.keys(rawData)[0]]\n          ).map((_, i) =>\n            Object.fromEntries(\n              Object.entries(rawData).map(([key, values]) => [\n                key,\n                Number(values[i]) || 0,\n              ])\n            )\n          );\n\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n          setSelectedDimensions(Object.keys(rawData)); // Default to show all dimensions\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [subspaceId]);\n\n  useEffect(() => {\n    if (!data.length) return;\n\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n\n    if (!selectedDimensions.length) {\n      // Render placeholder if no dimensions are selected\n      d3.select(containerRef.current)\n        .append(\"text\")\n        .attr(\"x\", 200)\n        .attr(\"y\", 200)\n        .style(\"font-size\", \"16px\")\n        .text(\"No dimensions selected. Please select at least one.\");\n      return;\n    }\n\n    const margin = { top: 30, right: 80, bottom: 10, left: 50 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3\n      .select(containerRef.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    const yScales = {};\n    selectedDimensions.forEach((dimension) => {\n      yScales[dimension] = d3\n        .scaleLinear()\n        .domain(d3.extent(data, (d) => d[dimension]))\n        .range([height, 0]);\n    });\n\n    const xScale = d3\n      .scalePoint()\n      .domain(selectedDimensions)\n      .range([0, width])\n      .padding(0.5);\n\n    const colorScale = d3\n      .scaleSequential(d3.interpolateViridis)\n      .domain(d3.extent(data, (d) => d[selectedDimensions[0]]));\n\n    svg\n      .selectAll(\".dimension\")\n      .data(selectedDimensions)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"dimension\")\n      .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n      .each(function (dimension) {\n        d3.select(this)\n          .call(d3.axisLeft(yScales[dimension]).ticks(6))\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", -9)\n          .text(dimension)\n          .style(\"fill\", \"black\")\n          .style(\"font-size\", \"12px\");\n      });\n\n    svg\n      .append(\"g\")\n      .selectAll(\".path\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (d) =>\n        d3.line()(\n          selectedDimensions.map((dimension) => [\n            xScale(dimension),\n            yScales[dimension](d[dimension]),\n          ])\n        )\n      )\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", (d) => colorScale(d[selectedDimensions[0]]))\n      .style(\"stroke-width\", 2)\n      .style(\"opacity\", 0.8);\n  }, [data, selectedDimensions]);\n\n  const toggleDimension = (dimension) => {\n    setSelectedDimensions((prev) =>\n      prev.includes(dimension)\n        ? prev.filter((d) => d !== dimension)\n        : [...prev, dimension]\n    );\n  };\n\n  const moveDimension = (fromIndex, toIndex) => {\n    setSelectedDimensions((prev) => {\n      const updated = [...prev];\n      const [movedItem] = updated.splice(fromIndex, 1);\n      updated.splice(toIndex, 0, movedItem);\n      return updated;\n    });\n  };\n\n  if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!data.length || !dimensions.length) {\n    return <div>No data available for the Parallel Coordinates Plot.</div>;\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\n        <div ref={containerRef} style={{ flex: 1 }}></div>\n        <div\n          style={{\n            width: \"200px\",\n            padding: \"10px\",\n            background: \"#f8f9fa\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            marginLeft: \"10px\",\n          }}\n        >\n          <h3>Reorder & Toggle Dimensions</h3>\n          {dimensions.map((dimension, index) => (\n            <DimensionItem\n              key={dimension}\n              dimension={dimension}\n              index={index}\n              moveDimension={moveDimension}\n              toggleDimension={toggleDimension}\n              selected={selectedDimensions.includes(dimension)}\n            />\n          ))}\n        </div>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default ParallelCoordinatesPlot;\n\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n\n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//     const margin = { top: 30, right: 50, bottom: 10, left: 80 };\n//     const width = 1000 - margin.left - margin.right; // Increased width\n//     const height = 600 - margin.top - margin.bottom;\n\n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n\n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n\n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 2) // Increased line thickness\n//       .style(\"opacity\", 0.8);\n\n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n\n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(-60, 0)`); // Moved legend to the left\n\n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n\n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n\n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n\n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n\n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n\n//     const legendAxis = d3\n//       .axisLeft(legendScale) // Changed to axisLeft\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n\n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth + 5}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);\n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}