{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/distribution/distributionComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DistributionPlot = ({\n  subspaceId\n}) => {\n  _s();\n  const [attribute, setAttribute] = useState(\"\");\n  const [label, setLabel] = useState(\"global\"); // Default to global distribution\n  const [attributes, setAttributes] = useState([]);\n  const [globalDistribution, setGlobalDistribution] = useState(null);\n  const [labelWiseDistribution, setLabelWiseDistribution] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch available attributes (this might already be available elsewhere)\n    const fetchAttributes = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/feature_ranges\", {\n          params: {\n            sub_ind: subspaceId\n          }\n        });\n        const attributes = Object.keys(response.data.feature_ranges);\n        setAttributes(attributes);\n        setAttribute(attributes[0]); // Default to the first attribute\n      } catch (err) {\n        setError(\"Failed to fetch attributes.\");\n      }\n    };\n    fetchAttributes();\n  }, [subspaceId]);\n  useEffect(() => {\n    if (attribute) {\n      // Fetch global distribution\n      const fetchGlobalDistribution = async () => {\n        try {\n          const response = await axios.get(\"http://127.0.0.1:5000/distribution_by_feature\", {\n            params: {\n              sub_ind: subspaceId,\n              feature: attribute,\n              by_label: false\n            }\n          });\n          setGlobalDistribution(response.data);\n        } catch (err) {\n          setError(\"Failed to fetch global distribution.\");\n        }\n      };\n\n      // Fetch label-wise distribution\n      const fetchLabelWiseDistribution = async () => {\n        try {\n          const response = await axios.get(\"http://127.0.0.1:5000/distribution_by_feature\", {\n            params: {\n              sub_ind: subspaceId,\n              feature: attribute,\n              by_label: true\n            }\n          });\n          setLabelWiseDistribution(response.data);\n        } catch (err) {\n          setError(\"Failed to fetch label-wise distribution.\");\n        }\n      };\n      fetchGlobalDistribution();\n      fetchLabelWiseDistribution();\n    }\n  }, [attribute, subspaceId]);\n  const plotData = () => {\n    if (label === \"global\" && globalDistribution) {\n      return [{\n        x: Object.keys(globalDistribution),\n        y: Object.values(globalDistribution),\n        type: \"bar\",\n        marker: {\n          color: \"blue\"\n        }\n      }];\n    }\n    if (label !== \"global\" && labelWiseDistribution[label]) {\n      const distribution = labelWiseDistribution[label];\n      return [{\n        x: Object.keys(distribution),\n        y: Object.values(distribution),\n        type: \"bar\",\n        marker: {\n          color: \"green\"\n        }\n      }];\n    }\n    return [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: \"10px\"\n        },\n        children: \"Attribute:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: attribute,\n        onChange: e => setAttribute(e.target.value),\n        children: attributes.map(attr => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: attr,\n          children: attr\n        }, attr, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginLeft: \"20px\",\n          marginRight: \"10px\"\n        },\n        children: \"Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: label,\n        onChange: e => setLabel(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"global\",\n          children: \"Global\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), Object.keys(labelWiseDistribution).map(lbl => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lbl,\n          children: [\"Label \", lbl]\n        }, lbl, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this), plotData().length > 0 && /*#__PURE__*/_jsxDEV(Plot, {\n      data: plotData(),\n      layout: {\n        title: `Distribution of ${attribute} in relation to ${label === \"global\" ? \"Global\" : `severity rate ${label}`}`,\n        xaxis: {\n          title: attribute\n        },\n        yaxis: {\n          title: \"Count\"\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(DistributionPlot, \"PDGI59ETFvvGAGwUJF1wd2Rdtv8=\");\n_c = DistributionPlot;\nexport default DistributionPlot;\nvar _c;\n$RefreshReg$(_c, \"DistributionPlot\");","map":{"version":3,"names":["React","useState","useEffect","Plot","axios","jsxDEV","_jsxDEV","DistributionPlot","subspaceId","_s","attribute","setAttribute","label","setLabel","attributes","setAttributes","globalDistribution","setGlobalDistribution","labelWiseDistribution","setLabelWiseDistribution","error","setError","fetchAttributes","response","get","params","sub_ind","Object","keys","data","feature_ranges","err","fetchGlobalDistribution","feature","by_label","fetchLabelWiseDistribution","plotData","x","y","values","type","marker","color","distribution","style","textAlign","padding","children","marginBottom","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","attr","marginLeft","lbl","length","layout","title","xaxis","yaxis","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/distribution/distributionComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\n\nconst DistributionPlot = ({ subspaceId }) => {\n  const [attribute, setAttribute] = useState(\"\");\n  const [label, setLabel] = useState(\"global\"); // Default to global distribution\n  const [attributes, setAttributes] = useState([]);\n  const [globalDistribution, setGlobalDistribution] = useState(null);\n  const [labelWiseDistribution, setLabelWiseDistribution] = useState({});\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Fetch available attributes (this might already be available elsewhere)\n    const fetchAttributes = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/feature_ranges\", {\n          params: { sub_ind: subspaceId },\n        });\n        const attributes = Object.keys(response.data.feature_ranges);\n        setAttributes(attributes);\n        setAttribute(attributes[0]); // Default to the first attribute\n      } catch (err) {\n        setError(\"Failed to fetch attributes.\");\n      }\n    };\n\n    fetchAttributes();\n  }, [subspaceId]);\n\n  useEffect(() => {\n    if (attribute) {\n      // Fetch global distribution\n      const fetchGlobalDistribution = async () => {\n        try {\n          const response = await axios.get(\"http://127.0.0.1:5000/distribution_by_feature\", {\n            params: { sub_ind: subspaceId, feature: attribute, by_label: false },\n          });\n          setGlobalDistribution(response.data);\n        } catch (err) {\n          setError(\"Failed to fetch global distribution.\");\n        }\n      };\n\n      // Fetch label-wise distribution\n      const fetchLabelWiseDistribution = async () => {\n        try {\n          const response = await axios.get(\"http://127.0.0.1:5000/distribution_by_feature\", {\n            params: { sub_ind: subspaceId, feature: attribute, by_label: true },\n          });\n          setLabelWiseDistribution(response.data);\n        } catch (err) {\n          setError(\"Failed to fetch label-wise distribution.\");\n        }\n      };\n\n      fetchGlobalDistribution();\n      fetchLabelWiseDistribution();\n    }\n  }, [attribute, subspaceId]);\n\n  const plotData = () => {\n    if (label === \"global\" && globalDistribution) {\n      return [\n        {\n          x: Object.keys(globalDistribution),\n          y: Object.values(globalDistribution),\n          type: \"bar\",\n          marker: { color: \"blue\" },\n        },\n      ];\n    }\n\n    if (label !== \"global\" && labelWiseDistribution[label]) {\n      const distribution = labelWiseDistribution[label];\n      return [\n        {\n          x: Object.keys(distribution),\n          y: Object.values(distribution),\n          type: \"bar\",\n          marker: { color: \"green\" },\n        },\n      ];\n    }\n\n    return [];\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <div style={{ marginBottom: \"20px\" }}>\n        <label style={{ marginRight: \"10px\" }}>Attribute:</label>\n        <select value={attribute} onChange={(e) => setAttribute(e.target.value)}>\n          {attributes.map((attr) => (\n            <option key={attr} value={attr}>\n              {attr}\n            </option>\n          ))}\n        </select>\n        <label style={{ marginLeft: \"20px\", marginRight: \"10px\" }}>Label:</label>\n        <select value={label} onChange={(e) => setLabel(e.target.value)}>\n          <option value=\"global\">Global</option>\n          {Object.keys(labelWiseDistribution).map((lbl) => (\n            <option key={lbl} value={lbl}>\n              Label {lbl}\n            </option>\n          ))}\n        </select>\n      </div>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      {plotData().length > 0 && (\n        <Plot\n          data={plotData()}\n          layout={{\n            title: `Distribution of ${attribute} in relation to ${label === \"global\" ? \"Global\" : `severity rate ${label}`}`,\n            xaxis: { title: attribute },\n            yaxis: { title: \"Count\" },\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DistributionPlot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACiB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtE,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,sCAAsC,EAAE;UACvEC,MAAM,EAAE;YAAEC,OAAO,EAAElB;UAAW;QAChC,CAAC,CAAC;QACF,MAAMM,UAAU,GAAGa,MAAM,CAACC,IAAI,CAACL,QAAQ,CAACM,IAAI,CAACC,cAAc,CAAC;QAC5Df,aAAa,CAACD,UAAU,CAAC;QACzBH,YAAY,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOiB,GAAG,EAAE;QACZV,QAAQ,CAAC,6BAA6B,CAAC;MACzC;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAEhBN,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,EAAE;MACb;MACA,MAAMsB,uBAAuB,GAAG,MAAAA,CAAA,KAAY;QAC1C,IAAI;UACF,MAAMT,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,+CAA+C,EAAE;YAChFC,MAAM,EAAE;cAAEC,OAAO,EAAElB,UAAU;cAAEyB,OAAO,EAAEvB,SAAS;cAAEwB,QAAQ,EAAE;YAAM;UACrE,CAAC,CAAC;UACFjB,qBAAqB,CAACM,QAAQ,CAACM,IAAI,CAAC;QACtC,CAAC,CAAC,OAAOE,GAAG,EAAE;UACZV,QAAQ,CAAC,sCAAsC,CAAC;QAClD;MACF,CAAC;;MAED;MACA,MAAMc,0BAA0B,GAAG,MAAAA,CAAA,KAAY;QAC7C,IAAI;UACF,MAAMZ,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,+CAA+C,EAAE;YAChFC,MAAM,EAAE;cAAEC,OAAO,EAAElB,UAAU;cAAEyB,OAAO,EAAEvB,SAAS;cAAEwB,QAAQ,EAAE;YAAK;UACpE,CAAC,CAAC;UACFf,wBAAwB,CAACI,QAAQ,CAACM,IAAI,CAAC;QACzC,CAAC,CAAC,OAAOE,GAAG,EAAE;UACZV,QAAQ,CAAC,0CAA0C,CAAC;QACtD;MACF,CAAC;MAEDW,uBAAuB,CAAC,CAAC;MACzBG,0BAA0B,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACzB,SAAS,EAAEF,UAAU,CAAC,CAAC;EAE3B,MAAM4B,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIxB,KAAK,KAAK,QAAQ,IAAII,kBAAkB,EAAE;MAC5C,OAAO,CACL;QACEqB,CAAC,EAAEV,MAAM,CAACC,IAAI,CAACZ,kBAAkB,CAAC;QAClCsB,CAAC,EAAEX,MAAM,CAACY,MAAM,CAACvB,kBAAkB,CAAC;QACpCwB,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE;UAAEC,KAAK,EAAE;QAAO;MAC1B,CAAC,CACF;IACH;IAEA,IAAI9B,KAAK,KAAK,QAAQ,IAAIM,qBAAqB,CAACN,KAAK,CAAC,EAAE;MACtD,MAAM+B,YAAY,GAAGzB,qBAAqB,CAACN,KAAK,CAAC;MACjD,OAAO,CACL;QACEyB,CAAC,EAAEV,MAAM,CAACC,IAAI,CAACe,YAAY,CAAC;QAC5BL,CAAC,EAAEX,MAAM,CAACY,MAAM,CAACI,YAAY,CAAC;QAC9BH,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE;UAAEC,KAAK,EAAE;QAAQ;MAC3B,CAAC,CACF;IACH;IAEA,OAAO,EAAE;EACX,CAAC;EAED,oBACEpC,OAAA;IAAKsC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACnDzC,OAAA;MAAKsC,KAAK,EAAE;QAAEI,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,gBACnCzC,OAAA;QAAOsC,KAAK,EAAE;UAAEK,WAAW,EAAE;QAAO,CAAE;QAAAF,QAAA,EAAC;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzD/C,OAAA;QAAQgD,KAAK,EAAE5C,SAAU;QAAC6C,QAAQ,EAAGC,CAAC,IAAK7C,YAAY,CAAC6C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAP,QAAA,EACrEjC,UAAU,CAAC4C,GAAG,CAAEC,IAAI,iBACnBrD,OAAA;UAAmBgD,KAAK,EAAEK,IAAK;UAAAZ,QAAA,EAC5BY;QAAI,GADMA,IAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAET,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACT/C,OAAA;QAAOsC,KAAK,EAAE;UAAEgB,UAAU,EAAE,MAAM;UAAEX,WAAW,EAAE;QAAO,CAAE;QAAAF,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzE/C,OAAA;QAAQgD,KAAK,EAAE1C,KAAM;QAAC2C,QAAQ,EAAGC,CAAC,IAAK3C,QAAQ,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAP,QAAA,gBAC9DzC,OAAA;UAAQgD,KAAK,EAAC,QAAQ;UAAAP,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACrC1B,MAAM,CAACC,IAAI,CAACV,qBAAqB,CAAC,CAACwC,GAAG,CAAEG,GAAG,iBAC1CvD,OAAA;UAAkBgD,KAAK,EAAEO,GAAI;UAAAd,QAAA,GAAC,QACtB,EAACc,GAAG;QAAA,GADCA,GAAG;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAER,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACLjC,KAAK,iBAAId,OAAA;MAAGsC,KAAK,EAAE;QAAEF,KAAK,EAAE;MAAM,CAAE;MAAAK,QAAA,EAAE3B;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChDjB,QAAQ,CAAC,CAAC,CAAC0B,MAAM,GAAG,CAAC,iBACpBxD,OAAA,CAACH,IAAI;MACH0B,IAAI,EAAEO,QAAQ,CAAC,CAAE;MACjB2B,MAAM,EAAE;QACNC,KAAK,EAAE,mBAAmBtD,SAAS,mBAAmBE,KAAK,KAAK,QAAQ,GAAG,QAAQ,GAAG,iBAAiBA,KAAK,EAAE,EAAE;QAChHqD,KAAK,EAAE;UAAED,KAAK,EAAEtD;QAAU,CAAC;QAC3BwD,KAAK,EAAE;UAAEF,KAAK,EAAE;QAAQ;MAC1B;IAAE;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAtHIF,gBAAgB;AAAA4D,EAAA,GAAhB5D,gBAAgB;AAwHtB,eAAeA,gBAAgB;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}