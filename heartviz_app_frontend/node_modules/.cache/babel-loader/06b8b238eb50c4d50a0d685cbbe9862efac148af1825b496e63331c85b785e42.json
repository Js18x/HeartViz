{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusteringTreeComponent = ({\n  subspaceId\n}) => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  const [error, setError] = useState(null);\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`);\n        if (!response.ok) {\n          throw new Error(`API Error: ${response.statusText}`);\n        }\n        const result = await response.json();\n\n        // Check and transform the backend response if needed\n        const transformedData = transformTreeData(result);\n        setTreeData(transformedData);\n      } catch (err) {\n        console.error(\"Error fetching tree data:\", err);\n        setError(\"Failed to fetch tree data.\");\n      }\n    };\n    fetchTreeData();\n  }, [subspaceId]);\n\n  /**\n   * Transform the backend response to ensure compatibility with react-d3-tree.\n   */\n  const transformTreeData = data => {\n    // Ensure the root node contains \"children\", \"name\", and other fields\n    if (!data || !data.name || !(\"children\" in data)) {\n      throw new Error(\"Invalid tree data format from backend\");\n    }\n    return data; // Backend data already matches react-d3-tree structure\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 21\n  }, this);\n  if (!treeData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Clustering Tree...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 25\n  }, this);\n  const renderCustomNode = ({\n    nodeDatum,\n    toggleNode\n  }) => {\n    const isLeaf = !nodeDatum.children; // Determine if the node is a leaf node\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      onMouseEnter: e => handleMouseEnter(e, nodeDatum, isLeaf),\n      onMouseLeave: handleMouseLeave,\n      onMouseMove: handleMouseMove,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        r: 10,\n        fill: isLeaf ? \"#8FCB9B\" : \"#6B6B6B\" // Different color for leaf/non-leaf nodes\n        ,\n        onClick: toggleNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        fill: \"black\",\n        x: 15,\n        children: nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  };\n  const handleMouseEnter = (e, nodeDatum, isLeaf) => {\n    let tooltipInfo = `Name: ${nodeDatum.name}`;\n    if (isLeaf) {\n      tooltipInfo += ` | Value: ${nodeDatum.value} | Index: ${nodeDatum.index_df}`;\n    } else {\n      const average = (nodeDatum.value / nodeDatum.leaf_node_size).toFixed(2);\n      tooltipInfo += ` | Value: ${nodeDatum.value.toFixed(2)} | Leaf Nodes: ${nodeDatum.leaf_node_size} | Average: ${average}`;\n    }\n    setTooltipContent(tooltipInfo);\n  };\n  const handleMouseMove = e => {\n    if (containerRef.current) {\n      const containerBounds = containerRef.current.getBoundingClientRect();\n      setTooltipPosition({\n        x: e.clientX - containerBounds.left + 10,\n        y: e.clientY - containerBounds.top + 10\n      });\n    }\n  };\n  const handleMouseLeave = () => {\n    setTooltipContent(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"600px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clustering Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      data: treeData,\n      orientation: \"vertical\",\n      pathFunc: \"diagonal\",\n      translate: {\n        x: 500,\n        y: 50\n      },\n      nodeSize: {\n        x: 150,\n        y: 100\n      },\n      renderCustomNodeElement: renderCustomNode,\n      initialDepth: 2,\n      styles: {\n        links: {\n          stroke: \"#136F63\",\n          strokeWidth: 2\n        },\n        nodes: {\n          node: {\n            circle: {\n              fill: \"#136F63\"\n            }\n          },\n          leafNode: {\n            circle: {\n              fill: \"#8FCB9B\"\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), tooltipContent && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: tooltipPosition.y,\n        left: tooltipPosition.x,\n        backgroundColor: \"white\",\n        border: \"1px solid #ccc\",\n        borderRadius: \"4px\",\n        padding: \"8px\",\n        boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\",\n        pointerEvents: \"none\",\n        fontSize: \"12px\"\n      },\n      children: tooltipContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusteringTreeComponent, \"sp3YizZczOHb6Md1PrubaK02g1s=\");\n_c = ClusteringTreeComponent;\nexport default ClusteringTreeComponent;\nvar _c;\n$RefreshReg$(_c, \"ClusteringTreeComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Tree","jsxDEV","_jsxDEV","ClusteringTreeComponent","subspaceId","_s","treeData","setTreeData","error","setError","tooltipContent","setTooltipContent","tooltipPosition","setTooltipPosition","x","y","containerRef","fetchTreeData","response","fetch","ok","Error","statusText","result","json","transformedData","transformTreeData","err","console","data","name","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCustomNode","nodeDatum","toggleNode","isLeaf","onMouseEnter","e","handleMouseEnter","onMouseLeave","handleMouseLeave","onMouseMove","handleMouseMove","r","fill","onClick","tooltipInfo","value","index_df","average","leaf_node_size","toFixed","current","containerBounds","getBoundingClientRect","clientX","left","clientY","top","ref","style","width","height","position","orientation","pathFunc","translate","nodeSize","renderCustomNodeElement","initialDepth","styles","links","stroke","strokeWidth","nodes","node","circle","leafNode","backgroundColor","border","borderRadius","padding","boxShadow","pointerEvents","fontSize","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Tree from \"react-d3-tree\";\n\nconst ClusteringTreeComponent = ({ subspaceId }) => {\n  const [treeData, setTreeData] = useState(null);\n  const [error, setError] = useState(null);\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        const response = await fetch(\n          `http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`\n        );\n        if (!response.ok) {\n          throw new Error(`API Error: ${response.statusText}`);\n        }\n        const result = await response.json();\n\n        // Check and transform the backend response if needed\n        const transformedData = transformTreeData(result);\n        setTreeData(transformedData);\n      } catch (err) {\n        console.error(\"Error fetching tree data:\", err);\n        setError(\"Failed to fetch tree data.\");\n      }\n    };\n\n    fetchTreeData();\n  }, [subspaceId]);\n\n  /**\n   * Transform the backend response to ensure compatibility with react-d3-tree.\n   */\n  const transformTreeData = (data) => {\n    // Ensure the root node contains \"children\", \"name\", and other fields\n    if (!data || !data.name || !(\"children\" in data)) {\n      throw new Error(\"Invalid tree data format from backend\");\n    }\n    return data; // Backend data already matches react-d3-tree structure\n  };\n\n  if (error) return <div>Error: {error}</div>;\n  if (!treeData) return <div>Loading Clustering Tree...</div>;\n\n  const renderCustomNode = ({ nodeDatum, toggleNode }) => {\n    const isLeaf = !nodeDatum.children; // Determine if the node is a leaf node\n    return (\n      <g\n        onMouseEnter={(e) => handleMouseEnter(e, nodeDatum, isLeaf)}\n        onMouseLeave={handleMouseLeave}\n        onMouseMove={handleMouseMove}\n      >\n        <circle\n          r={10}\n          fill={isLeaf ? \"#8FCB9B\" : \"#6B6B6B\"} // Different color for leaf/non-leaf nodes\n          onClick={toggleNode}\n        />\n        <text fill=\"black\" x={15}>\n          {nodeDatum.name}\n        </text>\n      </g>\n    );\n  };\n\n  const handleMouseEnter = (e, nodeDatum, isLeaf) => {\n    let tooltipInfo = `Name: ${nodeDatum.name}`;\n    if (isLeaf) {\n      tooltipInfo += ` | Value: ${nodeDatum.value} | Index: ${nodeDatum.index_df}`;\n    } else {\n      const average = (nodeDatum.value / nodeDatum.leaf_node_size).toFixed(2);\n      tooltipInfo += ` | Value: ${nodeDatum.value.toFixed(\n        2\n      )} | Leaf Nodes: ${nodeDatum.leaf_node_size} | Average: ${average}`;\n    }\n    setTooltipContent(tooltipInfo);\n  };\n\n  const handleMouseMove = (e) => {\n    if (containerRef.current) {\n      const containerBounds = containerRef.current.getBoundingClientRect();\n      setTooltipPosition({\n        x: e.clientX - containerBounds.left + 10,\n        y: e.clientY - containerBounds.top + 10,\n      });\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setTooltipContent(\"\");\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      style={{ width: \"100%\", height: \"600px\", position: \"relative\" }}\n    >\n      <h2>Clustering Tree</h2>\n      <Tree\n        data={treeData}\n        orientation=\"vertical\"\n        pathFunc=\"diagonal\"\n        translate={{ x: 500, y: 50 }}\n        nodeSize={{ x: 150, y: 100 }}\n        renderCustomNodeElement={renderCustomNode}\n        initialDepth={2}\n        styles={{\n          links: { stroke: \"#136F63\", strokeWidth: 2 },\n          nodes: {\n            node: { circle: { fill: \"#136F63\" } },\n            leafNode: { circle: { fill: \"#8FCB9B\" } },\n          },\n        }}\n      />\n      {tooltipContent && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: tooltipPosition.y,\n            left: tooltipPosition.x,\n            backgroundColor: \"white\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            padding: \"8px\",\n            boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\",\n            pointerEvents: \"none\",\n            fontSize: \"12px\",\n          }}\n        >\n          {tooltipContent}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ClusteringTreeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}