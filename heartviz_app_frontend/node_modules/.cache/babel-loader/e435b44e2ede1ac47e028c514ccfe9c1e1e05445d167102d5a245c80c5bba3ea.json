{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelCoordinatesPlot = ({\n  data,\n  dimensions\n}) => {\n  _s();\n  const containerRef = useRef();\n  useEffect(() => {\n    if (!data || !dimensions) return;\n\n    // Clear any existing content inside the container\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    const margin = {\n      top: 30,\n      right: 40,\n      bottom: 10,\n      left: 10\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Create SVG element\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales for each dimension\n    const yScales = {};\n    dimensions.forEach(dimension => {\n      yScales[dimension] = d3.scaleLinear().domain(d3.extent(data, d => d[dimension])).range([height, 0]);\n    });\n\n    // Create x scale for the dimensions\n    const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n    // Draw axis for each dimension\n    svg.selectAll(\".dimension\").data(dimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", d => `translate(${xScale(d)})`).each(function (dimension) {\n      d3.select(this).call(d3.axisLeft(yScales[dimension])).append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"y\", -9).text(dimension).style(\"fill\", \"black\");\n    });\n\n    // Draw the lines\n    const lineWidth = 1.5; // Set the line width here\n    svg.append(\"g\").selectAll(\".path\").data(data).enter().append(\"path\").attr(\"d\", d => d3.line()(dimensions.map(dimension => [xScale(dimension), yScales[dimension](d[dimension])]))).style(\"fill\", \"none\").style(\"stroke\", \"#136F63\").style(\"stroke-width\", lineWidth).style(\"opacity\", 0.7); // You can adjust opacity here\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 12\n  }, this);\n};\n_s(ParallelCoordinatesPlot, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ParallelCoordinatesPlot","data","dimensions","_s","containerRef","select","current","selectAll","remove","margin","top","right","bottom","left","width","height","svg","append","attr","yScales","forEach","dimension","scaleLinear","domain","extent","d","range","xScale","scalePoint","enter","each","call","axisLeft","text","style","lineWidth","line","map","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst ParallelCoordinatesPlot = ({ data, dimensions }) => {\n    const containerRef = useRef();\n\n    useEffect(() => {\n        if (!data || !dimensions) return;\n\n        // Clear any existing content inside the container\n        d3.select(containerRef.current).selectAll(\"*\").remove();\n\n        const margin = { top: 30, right: 40, bottom: 10, left: 10 };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n\n        // Create SVG element\n        const svg = d3\n            .select(containerRef.current)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Create scales for each dimension\n        const yScales = {};\n        dimensions.forEach((dimension) => {\n            yScales[dimension] = d3\n                .scaleLinear()\n                .domain(d3.extent(data, (d) => d[dimension]))\n                .range([height, 0]);\n        });\n\n        // Create x scale for the dimensions\n        const xScale = d3\n            .scalePoint()\n            .domain(dimensions)\n            .range([0, width]);\n\n        // Draw axis for each dimension\n        svg.selectAll(\".dimension\")\n            .data(dimensions)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"dimension\")\n            .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n            .each(function (dimension) {\n                d3.select(this)\n                    .call(d3.axisLeft(yScales[dimension]))\n                    .append(\"text\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"y\", -9)\n                    .text(dimension)\n                    .style(\"fill\", \"black\");\n            });\n\n        // Draw the lines\n        const lineWidth = 1.5; // Set the line width here\n        svg.append(\"g\")\n            .selectAll(\".path\")\n            .data(data)\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", (d) =>\n                d3.line()(\n                    dimensions.map((dimension) => [\n                        xScale(dimension),\n                        yScales[dimension](d[dimension]),\n                    ])\n                )\n            )\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", \"#136F63\")\n            .style(\"stroke-width\", lineWidth)\n            .style(\"opacity\", 0.7); // You can adjust opacity here\n    }, [data, dimensions]);\n\n    return <div ref={containerRef}></div>;\n};\n\nexport default ParallelCoordinatesPlot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}