{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/selector/attributeSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport mockAttributes from \"../../mockData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AttributeSelector() {\n  _s();\n  const [selectedAttributes, setSelectedAttributes] = useState(() => {\n    // Retrieve saved attributes from localStorage if available\n    const saved = localStorage.getItem(\"selectedAttributes\");\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  // Handle toggling an attribute on/off\n  const handleAttributeToggle = attribute => {\n    let updatedAttributes;\n    if (selectedAttributes.includes(attribute)) {\n      updatedAttributes = selectedAttributes.filter(item => item !== attribute);\n    } else {\n      updatedAttributes = [...selectedAttributes, attribute];\n    }\n    setSelectedAttributes(updatedAttributes);\n    localStorage.setItem(\"selectedAttributes\", JSON.stringify(updatedAttributes));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Attributes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mockAttributes.map((attribute, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: attribute,\n            checked: selectedAttributes.includes(attribute),\n            onChange: () => handleAttributeToggle(attribute)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this), attribute]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Selected Attributes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedAttributes.length > 0 ? selectedAttributes.join(\", \") : \"None selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(AttributeSelector, \"F1TdjHEvoImwpZPqJM5s2nSh+5U=\");\n_c = AttributeSelector;\nexport default AttributeSelector;\nvar _c;\n$RefreshReg$(_c, \"AttributeSelector\");","map":{"version":3,"names":["React","useState","useEffect","mockAttributes","jsxDEV","_jsxDEV","AttributeSelector","_s","selectedAttributes","setSelectedAttributes","saved","localStorage","getItem","JSON","parse","handleAttributeToggle","attribute","updatedAttributes","includes","filter","item","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","checked","onChange","length","join","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/selector/attributeSelector.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport mockAttributes from \"../../mockData\";\n\nfunction AttributeSelector() {\n    const [selectedAttributes, setSelectedAttributes] = useState(() => {\n        // Retrieve saved attributes from localStorage if available\n        const saved = localStorage.getItem(\"selectedAttributes\");\n        return saved ? JSON.parse(saved) : [];\n    });\n\n    // Handle toggling an attribute on/off\n    const handleAttributeToggle = (attribute) => {\n        let updatedAttributes;\n        if (selectedAttributes.includes(attribute)) {\n            updatedAttributes = selectedAttributes.filter((item) => item !== attribute);\n        } else {\n            updatedAttributes = [...selectedAttributes, attribute];\n        }\n\n        setSelectedAttributes(updatedAttributes);\n        localStorage.setItem(\"selectedAttributes\", JSON.stringify(updatedAttributes));\n    };\n\n    return (\n        <div>\n            <h2>Select Attributes</h2>\n            <ul>\n                {mockAttributes.map((attribute, index) => (\n                    <li key={index}>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value={attribute}\n                                checked={selectedAttributes.includes(attribute)}\n                                onChange={() => handleAttributeToggle(attribute)}\n                            />\n                            {attribute}\n                        </label>\n                    </li>\n                ))}\n            </ul>\n            <h3>Selected Attributes:</h3>\n            <p>{selectedAttributes.length > 0 ? selectedAttributes.join(\", \") : \"None selected\"}</p>\n        </div>\n    );\n}\n\nexport default AttributeSelector;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,MAAM;IAC/D;IACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IACxD,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;EACzC,CAAC,CAAC;;EAEF;EACA,MAAMK,qBAAqB,GAAIC,SAAS,IAAK;IACzC,IAAIC,iBAAiB;IACrB,IAAIT,kBAAkB,CAACU,QAAQ,CAACF,SAAS,CAAC,EAAE;MACxCC,iBAAiB,GAAGT,kBAAkB,CAACW,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKJ,SAAS,CAAC;IAC/E,CAAC,MAAM;MACHC,iBAAiB,GAAG,CAAC,GAAGT,kBAAkB,EAAEQ,SAAS,CAAC;IAC1D;IAEAP,qBAAqB,CAACQ,iBAAiB,CAAC;IACxCN,YAAY,CAACU,OAAO,CAAC,oBAAoB,EAAER,IAAI,CAACS,SAAS,CAACL,iBAAiB,CAAC,CAAC;EACjF,CAAC;EAED,oBACIZ,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BtB,OAAA;MAAAkB,QAAA,EACKpB,cAAc,CAACyB,GAAG,CAAC,CAACZ,SAAS,EAAEa,KAAK,kBACjCxB,OAAA;QAAAkB,QAAA,eACIlB,OAAA;UAAAkB,QAAA,gBACIlB,OAAA;YACIyB,IAAI,EAAC,UAAU;YACfC,KAAK,EAAEf,SAAU;YACjBgB,OAAO,EAAExB,kBAAkB,CAACU,QAAQ,CAACF,SAAS,CAAE;YAChDiB,QAAQ,EAAEA,CAAA,KAAMlB,qBAAqB,CAACC,SAAS;UAAE;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,EACDX,SAAS;QAAA;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP;MAAC,GATHE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACLtB,OAAA;MAAAkB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BtB,OAAA;MAAAkB,QAAA,EAAIf,kBAAkB,CAAC0B,MAAM,GAAG,CAAC,GAAG1B,kBAAkB,CAAC2B,IAAI,CAAC,IAAI,CAAC,GAAG;IAAe;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvF,CAAC;AAEd;AAACpB,EAAA,CA1CQD,iBAAiB;AAAA8B,EAAA,GAAjB9B,iBAAiB;AA4C1B,eAAeA,iBAAiB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}