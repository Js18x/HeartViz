{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelCoordinatesPlot = ({\n  subspaceId\n}) => {\n  _s();\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch data for the plot\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(`http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.data) {\n          const rawData = result.data;\n\n          // Convert raw data into an array format for D3\n          const formattedData = Object.keys(rawData[Object.keys(rawData)[0]]).map((_, i) => Object.fromEntries(Object.entries(rawData).map(([key, values]) => [key, Number(values[i]) || 0 // Ensure values are numeric\n          ])));\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [subspaceId]);\n\n  // Render the parallel coordinates plot\n  useEffect(() => {\n    if (!data.length || !dimensions.length) return;\n\n    // Clear any existing content\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    const margin = {\n      top: 30,\n      right: 80,\n      bottom: 10,\n      left: 15\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    const yScales = {};\n    dimensions.forEach(dimension => {\n      const validData = data.map(d => d[dimension]).filter(val => !isNaN(val)); // Ensure numeric data\n      yScales[dimension] = d3.scaleLinear().domain(d3.extent(validData)) // Compute extent only for valid numbers\n      .range([height, 0]);\n    });\n    const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n    const colorScale = d3.scaleSequential(d3.interpolateViridis).domain(d3.extent(data, d => d[dimensions[0]]));\n\n    // Draw axes for each dimension\n    svg.selectAll(\".dimension\").data(dimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", d => `translate(${xScale(d)})`).each(function (dimension) {\n      d3.select(this).call(d3.axisLeft(yScales[dimension]).ticks(6)).append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"y\", -9).text(dimension).style(\"fill\", \"black\").style(\"font-size\", \"12px\");\n    });\n\n    // Draw the lines\n    svg.append(\"g\").selectAll(\".path\").data(data).enter().append(\"path\").attr(\"d\", d => d3.line()(dimensions.map(dimension => [xScale(dimension), yScales[dimension](d[dimension])]))).style(\"fill\", \"none\").style(\"stroke\", d => colorScale(d[dimensions[0]])).style(\"stroke-width\", 1.5).style(\"opacity\", 0.7);\n\n    // Add a legend for the color scale\n    const legendWidth = 10;\n    const legendHeight = 600;\n    const legendSvg = svg.append(\"g\").attr(\"transform\", `translate(${width + 20}, 0)`);\n    const gradient = legendSvg.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"color-gradient\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", \"0%\").attr(\"x2\", \"0%\").attr(\"y1\", \"0%\").attr(\"y2\", \"100%\");\n    gradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", d3.interpolateViridis(1));\n    gradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", d3.interpolateViridis(0));\n    legendSvg.append(\"rect\").attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#color-gradient)\");\n    const colorDomain = d3.extent(data, d => d[dimensions[0]]);\n    const legendScale = d3.scaleLinear().domain(colorDomain).range([0, legendHeight]);\n    const legendAxis = d3.axisRight(legendScale).ticks(6).tickFormat(d3.format(\".1f\"));\n    legendSvg.append(\"g\").attr(\"transform\", `translate(${legendWidth}, 0)`).call(legendAxis);\n  }, [data, dimensions]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Parallel Coordinates Plot...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 23\n  }, this);\n  if (!data.length || !dimensions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the Parallel Coordinates Plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Parallel Coordinates Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n};\n_s(ParallelCoordinatesPlot, \"Ox2DRe/Hwt2QFhyWZ0DWMxrXQ6s=\");\n_c = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","jsxDEV","_jsxDEV","ParallelCoordinatesPlot","subspaceId","_s","containerRef","data","setData","dimensions","setDimensions","loading","setLoading","error","setError","fetchData","Error","response","fetch","result","json","rawData","formattedData","Object","keys","map","_","i","fromEntries","entries","key","values","Number","err","message","length","select","current","selectAll","remove","margin","top","right","bottom","left","width","height","svg","append","attr","yScales","forEach","dimension","validData","d","filter","val","isNaN","scaleLinear","domain","extent","range","xScale","scalePoint","colorScale","scaleSequential","interpolateViridis","enter","each","call","axisLeft","ticks","text","style","line","legendWidth","legendHeight","legendSvg","gradient","colorDomain","legendScale","legendAxis","axisRight","tickFormat","format","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst ParallelCoordinatesPlot = ({ subspaceId }) => {\n    const containerRef = useRef();\n    const [data, setData] = useState([]);\n    const [dimensions, setDimensions] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Fetch data for the plot\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n                const response = await fetch(\n                    `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n                );\n                const result = await response.json();\n\n                if (result.data) {\n                    const rawData = result.data;\n\n                    // Convert raw data into an array format for D3\n                    const formattedData = Object.keys(\n                        rawData[Object.keys(rawData)[0]]\n                    ).map((_, i) =>\n                        Object.fromEntries(\n                            Object.entries(rawData).map(([key, values]) => [\n                                key,\n                                Number(values[i]) || 0, // Ensure values are numeric\n                            ])\n                        )\n                    );\n\n                    setData(formattedData);\n                    setDimensions(Object.keys(rawData));\n                } else {\n                    throw new Error(result.error || \"Failed to fetch data.\");\n                }\n            } catch (err) {\n                setError(err.message || \"An unknown error occurred.\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [subspaceId]);\n\n    // Render the parallel coordinates plot\n    useEffect(() => {\n        if (!data.length || !dimensions.length) return;\n\n        // Clear any existing content\n        d3.select(containerRef.current).selectAll(\"*\").remove();\n\n        const margin = { top: 30, right: 80, bottom: 10, left: 15 };\n        const width = 800 - margin.left - margin.right;\n        const height = 600 - margin.top - margin.bottom;\n\n        const svg = d3\n            .select(containerRef.current)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        const yScales = {};\n        dimensions.forEach((dimension) => {\n            const validData = data.map((d) => d[dimension]).filter((val) => !isNaN(val)); // Ensure numeric data\n            yScales[dimension] = d3\n                .scaleLinear()\n                .domain(d3.extent(validData)) // Compute extent only for valid numbers\n                .range([height, 0]);\n        });\n\n        const xScale = d3\n            .scalePoint()\n            .domain(dimensions)\n            .range([0, width]);\n\n        const colorScale = d3\n            .scaleSequential(d3.interpolateViridis)\n            .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n        // Draw axes for each dimension\n        svg.selectAll(\".dimension\")\n            .data(dimensions)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"dimension\")\n            .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n            .each(function (dimension) {\n                d3.select(this)\n                    .call(d3.axisLeft(yScales[dimension]).ticks(6))\n                    .append(\"text\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"y\", -9)\n                    .text(dimension)\n                    .style(\"fill\", \"black\")\n                    .style(\"font-size\", \"12px\");\n            });\n\n        // Draw the lines\n        svg.append(\"g\")\n            .selectAll(\".path\")\n            .data(data)\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", (d) =>\n                d3.line()(\n                    dimensions.map((dimension) => [\n                        xScale(dimension),\n                        yScales[dimension](d[dimension]),\n                    ])\n                )\n            )\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n            .style(\"stroke-width\", 1.5)\n            .style(\"opacity\", 0.7);\n\n        // Add a legend for the color scale\n        const legendWidth = 10;\n        const legendHeight = 600;\n\n        const legendSvg = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${width + 20}, 0)`);\n\n        const gradient = legendSvg\n            .append(\"defs\")\n            .append(\"linearGradient\")\n            .attr(\"id\", \"color-gradient\")\n            .attr(\"gradientUnits\", \"userSpaceOnUse\")\n            .attr(\"x1\", \"0%\")\n            .attr(\"x2\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"y2\", \"100%\");\n\n        gradient\n            .append(\"stop\")\n            .attr(\"offset\", \"0%\")\n            .attr(\"stop-color\", d3.interpolateViridis(1));\n        gradient\n            .append(\"stop\")\n            .attr(\"offset\", \"100%\")\n            .attr(\"stop-color\", d3.interpolateViridis(0));\n\n        legendSvg\n            .append(\"rect\")\n            .attr(\"width\", legendWidth)\n            .attr(\"height\", legendHeight)\n            .style(\"fill\", \"url(#color-gradient)\");\n\n        const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n        const legendScale = d3\n            .scaleLinear()\n            .domain(colorDomain)\n            .range([0, legendHeight]);\n\n        const legendAxis = d3\n            .axisRight(legendScale)\n            .ticks(6)\n            .tickFormat(d3.format(\".1f\"));\n\n        legendSvg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${legendWidth}, 0)`)\n            .call(legendAxis);\n    }, [data, dimensions]);\n\n    if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n    if (error) return <div>Error: {error}</div>;\n    if (!data.length || !dimensions.length) {\n        return <div>No data available for the Parallel Coordinates Plot.</div>;\n    }\n\n    return (\n        <div>\n            <h1>Parallel Coordinates Plot</h1>\n            <div ref={containerRef}></div>\n        </div>\n    );\n};\n\nexport default ParallelCoordinatesPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}