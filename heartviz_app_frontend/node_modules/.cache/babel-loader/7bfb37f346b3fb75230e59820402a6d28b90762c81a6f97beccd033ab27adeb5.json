{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusteringTreeComponent = ({\n  subspaceId\n}) => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(`http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.name) {\n          setTreeData(result);\n        } else {\n          throw new Error(result.error || \"Failed to fetch clustering tree.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTreeData();\n  }, [subspaceId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Clustering Tree...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 21\n  }, this);\n  if (!treeData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No clustering tree data available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 25\n  }, this);\n\n  // Tree rendering styles\n  const treeStyles = {\n    links: {\n      stroke: \"#136F63\",\n      strokeWidth: 2\n    },\n    nodes: {\n      fill: \"#92AFA2\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clustering Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      data: treeData,\n      orientation: \"vertical\" // Render tree vertically\n      ,\n      pathFunc: \"diagonal\" // Link styling\n      ,\n      styles: treeStyles // Custom styles\n      ,\n      translate: {\n        x: 400,\n        y: 50\n      } // Center the tree\n      ,\n      nodeSize: {\n        x: 150,\n        y: 100\n      } // Node spacing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusteringTreeComponent, \"Wa7EDPLAJBHd85aQOyHPgsEmLyQ=\");\n_c = ClusteringTreeComponent;\nexport default ClusteringTreeComponent;\nvar _c;\n$RefreshReg$(_c, \"ClusteringTreeComponent\");","map":{"version":3,"names":["React","useState","useEffect","Tree","jsxDEV","_jsxDEV","ClusteringTreeComponent","subspaceId","_s","treeData","setTreeData","loading","setLoading","error","setError","fetchTreeData","Error","response","fetch","result","json","name","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","treeStyles","links","stroke","strokeWidth","nodes","fill","style","width","height","data","orientation","pathFunc","styles","translate","x","y","nodeSize","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Tree from \"react-d3-tree\";\n\nconst ClusteringTreeComponent = ({ subspaceId }) => {\n  const [treeData, setTreeData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n\n        const response = await fetch(\n          `http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n\n        if (result.name) {\n          setTreeData(result);\n        } else {\n          throw new Error(result.error || \"Failed to fetch clustering tree.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTreeData();\n  }, [subspaceId]);\n\n  if (loading) return <div>Loading Clustering Tree...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!treeData) return <div>No clustering tree data available.</div>;\n\n  // Tree rendering styles\n  const treeStyles = {\n    links: { stroke: \"#136F63\", strokeWidth: 2 },\n    nodes: { fill: \"#92AFA2\" },\n  };\n\n  return (\n    <div style={{ width: \"100%\", height: \"600px\" }}>\n      <h2>Clustering Tree</h2>\n      <Tree\n        data={treeData}\n        orientation=\"vertical\" // Render tree vertically\n        pathFunc=\"diagonal\" // Link styling\n        styles={treeStyles} // Custom styles\n        translate={{ x: 400, y: 50 }} // Center the tree\n        nodeSize={{ x: 150, y: 100 }} // Node spacing\n      />\n    </div>\n  );\n};\n\nexport default ClusteringTreeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}