{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//     const containerRef = useRef();\n//     const [data, setData] = useState([]);\n//     const [dimensions, setDimensions] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch data for the plot\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//                 const response = await fetch(\n//                     `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//                 );\n//                 const result = await response.json();\n\n//                 if (result.data) {\n//                     const rawData = result.data;\n\n//                     // Convert raw data into an array format for D3\n//                     const formattedData = Object.keys(\n//                         rawData[Object.keys(rawData)[0]]\n//                     ).map((_, i) =>\n//                         Object.fromEntries(\n//                             Object.entries(rawData).map(([key, values]) => [\n//                                 key,\n//                                 values[i],\n//                             ])\n//                         )\n//                     );\n\n//                     setData(formattedData);\n//                     setDimensions(Object.keys(rawData));\n//                 } else {\n//                     throw new Error(result.error || \"Failed to fetch data.\");\n//                 }\n//             } catch (err) {\n//                 setError(err.message || \"An unknown error occurred.\");\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, [subspaceId]);\n\n//     // Render the parallel coordinates plot\n//     useEffect(() => {\n//         if (!data.length || !dimensions.length) return;\n\n//         // Clear any existing content\n//         d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//         const margin = { top: 30, right: 80, bottom: 10, left: 15 };\n//         const width = 800 - margin.left - margin.right;\n//         const height = 600 - margin.top - margin.bottom;\n\n//         const svg = d3\n//             .select(containerRef.current)\n//             .append(\"svg\")\n//             .attr(\"width\", width + margin.left + margin.right)\n//             .attr(\"height\", height + margin.top + margin.bottom)\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//         const yScales = {};\n//         dimensions.forEach((dimension) => {\n//             yScales[dimension] = d3\n//                 .scaleLinear()\n//                 .domain(d3.extent(data, (d) => d[dimension]))\n//                 .range([height, 0]);\n//         });\n\n//         const xScale = d3\n//             .scalePoint()\n//             .domain(dimensions)\n//             .range([0, width]);\n\n//         const colorScale = d3\n//             .scaleSequential(d3.interpolateViridis)\n//             .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//         // Draw axes for each dimension\n//         svg.selectAll(\".dimension\")\n//             .data(dimensions)\n//             .enter()\n//             .append(\"g\")\n//             .attr(\"class\", \"dimension\")\n//             .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//             .each(function (dimension) {\n//                 d3.select(this)\n//                     .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//                     .append(\"text\")\n//                     .attr(\"text-anchor\", \"middle\")\n//                     .attr(\"y\", -9)\n//                     .text(dimension)\n//                     .style(\"fill\", \"black\")\n//                     .style(\"font-size\", \"12px\");\n//             });\n\n//         // Draw the lines\n//         svg.append(\"g\")\n//             .selectAll(\".path\")\n//             .data(data)\n//             .enter()\n//             .append(\"path\")\n//             .attr(\"d\", (d) =>\n//                 d3.line()(\n//                     dimensions.map((dimension) => [\n//                         xScale(dimension),\n//                         yScales[dimension](d[dimension]),\n//                     ])\n//                 )\n//             )\n//             .style(\"fill\", \"none\")\n//             .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//             .style(\"stroke-width\", 1.5)\n//             .style(\"opacity\", 0.7);\n\n//         // Add a legend for the color scale\n//         const legendWidth = 10;\n//         const legendHeight = 600;\n\n//         const legendSvg = svg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${width + 20}, 0)`);\n\n//         const gradient = legendSvg\n//             .append(\"defs\")\n//             .append(\"linearGradient\")\n//             .attr(\"id\", \"color-gradient\")\n//             .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//             .attr(\"x1\", \"0%\")\n//             .attr(\"x2\", \"0%\")\n//             .attr(\"y1\", \"0%\")\n//             .attr(\"y2\", \"100%\");\n\n//         gradient\n//             .append(\"stop\")\n//             .attr(\"offset\", \"0%\")\n//             .attr(\"stop-color\", d3.interpolateViridis(1));\n//         gradient\n//             .append(\"stop\")\n//             .attr(\"offset\", \"100%\")\n//             .attr(\"stop-color\", d3.interpolateViridis(0));\n\n//         legendSvg\n//             .append(\"rect\")\n//             .attr(\"width\", legendWidth)\n//             .attr(\"height\", legendHeight)\n//             .style(\"fill\", \"url(#color-gradient)\");\n\n//         const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//         const legendScale = d3\n//             .scaleLinear()\n//             .domain(colorDomain)\n//             .range([0, legendHeight]);\n\n//         const legendAxis = d3\n//             .axisRight(legendScale)\n//             .ticks(6)\n//             .tickFormat(d3.format(\".1f\"));\n\n//         legendSvg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${legendWidth}, 0)`)\n//             .call(legendAxis);\n//     }, [data, dimensions]);\n\n//     if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//     if (error) return <div>Error: {error}</div>;\n//     if (!data.length || !dimensions.length) {\n//         return <div>No data available for the Parallel Coordinates Plot.</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>Parallel Coordinates Plot</h1>\n//             <div ref={containerRef}></div>\n//         </div>\n//     );\n// };\n\n// export default ParallelCoordinatesPlot;","map":{"version":3,"names":[],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//     const containerRef = useRef();\n//     const [data, setData] = useState([]);\n//     const [dimensions, setDimensions] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     // Fetch data for the plot\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//                 const response = await fetch(\n//                     `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//                 );\n//                 const result = await response.json();\n\n//                 if (result.data) {\n//                     const rawData = result.data;\n\n//                     // Convert raw data into an array format for D3\n//                     const formattedData = Object.keys(\n//                         rawData[Object.keys(rawData)[0]]\n//                     ).map((_, i) =>\n//                         Object.fromEntries(\n//                             Object.entries(rawData).map(([key, values]) => [\n//                                 key,\n//                                 values[i],\n//                             ])\n//                         )\n//                     );\n\n//                     setData(formattedData);\n//                     setDimensions(Object.keys(rawData));\n//                 } else {\n//                     throw new Error(result.error || \"Failed to fetch data.\");\n//                 }\n//             } catch (err) {\n//                 setError(err.message || \"An unknown error occurred.\");\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, [subspaceId]);\n\n//     // Render the parallel coordinates plot\n//     useEffect(() => {\n//         if (!data.length || !dimensions.length) return;\n\n//         // Clear any existing content\n//         d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//         const margin = { top: 30, right: 80, bottom: 10, left: 15 };\n//         const width = 800 - margin.left - margin.right;\n//         const height = 600 - margin.top - margin.bottom;\n\n//         const svg = d3\n//             .select(containerRef.current)\n//             .append(\"svg\")\n//             .attr(\"width\", width + margin.left + margin.right)\n//             .attr(\"height\", height + margin.top + margin.bottom)\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//         const yScales = {};\n//         dimensions.forEach((dimension) => {\n//             yScales[dimension] = d3\n//                 .scaleLinear()\n//                 .domain(d3.extent(data, (d) => d[dimension]))\n//                 .range([height, 0]);\n//         });\n\n//         const xScale = d3\n//             .scalePoint()\n//             .domain(dimensions)\n//             .range([0, width]);\n\n//         const colorScale = d3\n//             .scaleSequential(d3.interpolateViridis)\n//             .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//         // Draw axes for each dimension\n//         svg.selectAll(\".dimension\")\n//             .data(dimensions)\n//             .enter()\n//             .append(\"g\")\n//             .attr(\"class\", \"dimension\")\n//             .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//             .each(function (dimension) {\n//                 d3.select(this)\n//                     .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//                     .append(\"text\")\n//                     .attr(\"text-anchor\", \"middle\")\n//                     .attr(\"y\", -9)\n//                     .text(dimension)\n//                     .style(\"fill\", \"black\")\n//                     .style(\"font-size\", \"12px\");\n//             });\n\n//         // Draw the lines\n//         svg.append(\"g\")\n//             .selectAll(\".path\")\n//             .data(data)\n//             .enter()\n//             .append(\"path\")\n//             .attr(\"d\", (d) =>\n//                 d3.line()(\n//                     dimensions.map((dimension) => [\n//                         xScale(dimension),\n//                         yScales[dimension](d[dimension]),\n//                     ])\n//                 )\n//             )\n//             .style(\"fill\", \"none\")\n//             .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//             .style(\"stroke-width\", 1.5)\n//             .style(\"opacity\", 0.7);\n\n//         // Add a legend for the color scale\n//         const legendWidth = 10;\n//         const legendHeight = 600;\n\n//         const legendSvg = svg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${width + 20}, 0)`);\n\n//         const gradient = legendSvg\n//             .append(\"defs\")\n//             .append(\"linearGradient\")\n//             .attr(\"id\", \"color-gradient\")\n//             .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//             .attr(\"x1\", \"0%\")\n//             .attr(\"x2\", \"0%\")\n//             .attr(\"y1\", \"0%\")\n//             .attr(\"y2\", \"100%\");\n\n//         gradient\n//             .append(\"stop\")\n//             .attr(\"offset\", \"0%\")\n//             .attr(\"stop-color\", d3.interpolateViridis(1));\n//         gradient\n//             .append(\"stop\")\n//             .attr(\"offset\", \"100%\")\n//             .attr(\"stop-color\", d3.interpolateViridis(0));\n\n//         legendSvg\n//             .append(\"rect\")\n//             .attr(\"width\", legendWidth)\n//             .attr(\"height\", legendHeight)\n//             .style(\"fill\", \"url(#color-gradient)\");\n\n//         const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//         const legendScale = d3\n//             .scaleLinear()\n//             .domain(colorDomain)\n//             .range([0, legendHeight]);\n\n//         const legendAxis = d3\n//             .axisRight(legendScale)\n//             .ticks(6)\n//             .tickFormat(d3.format(\".1f\"));\n\n//         legendSvg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${legendWidth}, 0)`)\n//             .call(legendAxis);\n//     }, [data, dimensions]);\n\n//     if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//     if (error) return <div>Error: {error}</div>;\n//     if (!data.length || !dimensions.length) {\n//         return <div>No data available for the Parallel Coordinates Plot.</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>Parallel Coordinates Plot</h1>\n//             <div ref={containerRef}></div>\n//         </div>\n//     );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}