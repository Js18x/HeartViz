{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClusteringTreeComponent = ({\n  subspaceId\n}) => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch and transform tree data\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        console.log(\"Fetched Tree Data:\", result); // Debugging the fetched data\n        setTreeData(result);\n      } catch (err) {\n        console.error(\"Error fetching tree data:\", err);\n        setError(\"Failed to fetch tree data.\");\n      }\n    };\n    fetchTreeData();\n  }, [subspaceId]);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 21\n  }, this);\n  if (!treeData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Clustering Tree...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 25\n  }, this);\n\n  // Custom node rendering function\n  const renderCustomNode = ({\n    nodeDatum,\n    toggleNode\n  }) => /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      r: 10,\n      fill: \"#6B6B6B\",\n      onClick: toggleNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      fill: \"black\",\n      x: 15,\n      children: nodeDatum.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), nodeDatum.type && /*#__PURE__*/_jsxDEV(\"text\", {\n      fill: \"gray\",\n      x: 15,\n      dy: 20,\n      children: [\"Type: \", nodeDatum.type]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), nodeDatum.value !== undefined && /*#__PURE__*/_jsxDEV(\"text\", {\n      fill: \"gray\",\n      x: 15,\n      dy: 35,\n      children: [\"Value: \", nodeDatum.value.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clustering Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      data: treeData,\n      orientation: \"vertical\",\n      pathFunc: \"diagonal\",\n      translate: {\n        x: 400,\n        y: 50\n      },\n      nodeSize: {\n        x: 150,\n        y: 100\n      },\n      renderCustomNodeElement: renderCustomNode // Custom rendering\n      ,\n      styles: {\n        links: {\n          stroke: \"#136F63\",\n          strokeWidth: 2\n        },\n        nodes: {\n          node: {\n            circle: {\n              fill: \"#136F63\"\n            }\n          },\n          leafNode: {\n            circle: {\n              fill: \"#8FCB9B\"\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ClusteringTreeComponent, \"B9mpWdSqLB5wRUXUT8fAHyucl8Q=\");\n_c = ClusteringTreeComponent;\nexport default ClusteringTreeComponent;\nvar _c;\n$RefreshReg$(_c, \"ClusteringTreeComponent\");","map":{"version":3,"names":["React","useEffect","useState","Tree","jsxDEV","_jsxDEV","ClusteringTreeComponent","subspaceId","_s","treeData","setTreeData","error","setError","fetchTreeData","response","fetch","result","json","console","log","err","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCustomNode","nodeDatum","toggleNode","r","fill","onClick","x","name","type","dy","value","undefined","toFixed","style","width","height","data","orientation","pathFunc","translate","y","nodeSize","renderCustomNodeElement","styles","links","stroke","strokeWidth","nodes","node","circle","leafNode","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/clusteringTree/clusteringTree.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\n\nconst ClusteringTreeComponent = ({ subspaceId }) => {\n  const [treeData, setTreeData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch and transform tree data\n  useEffect(() => {\n    const fetchTreeData = async () => {\n      try {\n        const response = await fetch(\n          `http://127.0.0.1:5000/hierarchy_cluster?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n        console.log(\"Fetched Tree Data:\", result); // Debugging the fetched data\n        setTreeData(result);\n      } catch (err) {\n        console.error(\"Error fetching tree data:\", err);\n        setError(\"Failed to fetch tree data.\");\n      }\n    };\n\n    fetchTreeData();\n  }, [subspaceId]);\n\n  if (error) return <div>Error: {error}</div>;\n  if (!treeData) return <div>Loading Clustering Tree...</div>;\n\n  // Custom node rendering function\n  const renderCustomNode = ({ nodeDatum, toggleNode }) => (\n    <g>\n      {/* Circle for the node */}\n      <circle r={10} fill=\"#6B6B6B\" onClick={toggleNode} />\n      {/* Display the node name */}\n      <text fill=\"black\" x={15}>\n        {nodeDatum.name}\n      </text>\n      {/* Display additional details like type and value */}\n      {nodeDatum.type && (\n        <text fill=\"gray\" x={15} dy={20}>\n          Type: {nodeDatum.type}\n        </text>\n      )}\n      {nodeDatum.value !== undefined && (\n        <text fill=\"gray\" x={15} dy={35}>\n          Value: {nodeDatum.value.toFixed(2)}\n        </text>\n      )}\n    </g>\n  );\n\n  return (\n    <div style={{ width: \"100%\", height: \"600px\" }}>\n      <h2>Clustering Tree</h2>\n      <Tree\n        data={treeData}\n        orientation=\"vertical\"\n        pathFunc=\"diagonal\"\n        translate={{ x: 400, y: 50 }}\n        nodeSize={{ x: 150, y: 100 }}\n        renderCustomNodeElement={renderCustomNode} // Custom rendering\n        styles={{\n          links: { stroke: \"#136F63\", strokeWidth: 2 },\n          nodes: {\n            node: { circle: { fill: \"#136F63\" } },\n            leafNode: { circle: { fill: \"#8FCB9B\" } },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClusteringTreeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}