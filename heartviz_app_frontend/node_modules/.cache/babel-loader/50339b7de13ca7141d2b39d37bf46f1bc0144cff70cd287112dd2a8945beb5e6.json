{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DimensionItem = ({\n  dimension,\n  index,\n  moveDimension,\n  toggleDimension,\n  selected\n}) => {\n  _s();\n  const ref = useRef();\n  const [, drop] = useDrop({\n    accept: \"DIMENSION\",\n    hover(item) {\n      if (item.index !== index) {\n        moveDimension(item.index, index);\n        item.index = index;\n      }\n    }\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: \"DIMENSION\",\n    item: {\n      index\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      padding: \"8px\",\n      margin: \"4px 0\",\n      backgroundColor: selected ? \"#007bff\" : \"#e0e0e0\",\n      color: selected ? \"#fff\" : \"#000\",\n      cursor: \"move\",\n      opacity: isDragging ? 0.5 : 1,\n      borderRadius: \"4px\",\n      textAlign: \"center\"\n    },\n    onClick: () => toggleDimension(dimension),\n    children: dimension\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(DimensionItem, \"SYYd1my1HJmIW9rZNaWEabF/XNs=\", false, function () {\n  return [useDrop, useDrag];\n});\n_c = DimensionItem;\nconst ParallelCoordinatesPlot = ({\n  subspaceId\n}) => {\n  _s2();\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(`http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.data) {\n          const rawData = result.data;\n          const formattedData = Object.keys(rawData[Object.keys(rawData)[0]]).map((_, i) => Object.fromEntries(Object.entries(rawData).map(([key, values]) => [key, Number(values[i]) || 0])));\n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n          setSelectedDimensions(Object.keys(rawData));\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [subspaceId]);\n  useEffect(() => {\n    if (!data.length) return;\n\n    // Clear the container\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    if (!selectedDimensions.length) {\n      // Show message when no dimensions are selected\n      d3.select(containerRef.current).append(\"text\").attr(\"x\", 200).attr(\"y\", 200).style(\"font-size\", \"16px\").text(\"No dimensions selected. Please select at least one.\");\n      return;\n    }\n    const margin = {\n      top: 30,\n      right: 80,\n      bottom: 10,\n      left: 100\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Define y-scales for each dimension\n    const yScales = {};\n    selectedDimensions.forEach(dimension => {\n      yScales[dimension] = d3.scaleLinear().domain(d3.extent(data, d => d[dimension])).range([height, 0]);\n    });\n\n    // Define x-scale for the dimensions\n    const xScale = d3.scalePoint().domain(selectedDimensions).range([0, width]).padding(0.5);\n\n    // Define color scale based on the first selected dimension\n    const colorScale = d3.scaleSequential(d3.interpolatePlasma).domain(d3.extent(data, d => d[selectedDimensions[0]]));\n\n    // Draw the paths for each data point\n    const paths = svg.append(\"g\").selectAll(\".path\").data(data).enter().append(\"path\").attr(\"d\", d => d3.line()(selectedDimensions.map(dimension => [xScale(dimension), yScales[dimension](d[dimension])]))).style(\"fill\", \"none\").style(\"stroke\", d => colorScale(d[selectedDimensions[0]])).style(\"stroke-width\", 2).style(\"opacity\", 0.7);\n\n    // Interactive highlighting\n    paths.on(\"mouseover\", function () {\n      d3.select(this).raise().style(\"stroke-width\", 4).style(\"opacity\", 1);\n      paths.filter(p => p !== this.__data__).style(\"opacity\", 0.1);\n    }).on(\"mouseout\", function () {\n      d3.select(this).style(\"stroke-width\", 2).style(\"opacity\", 0.7);\n      paths.style(\"opacity\", 0.7);\n    });\n\n    // Add axis and labels for each dimension\n    svg.selectAll(\".dimension\").data(selectedDimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", d => `translate(${xScale(d)})`).each(function (dimension) {\n      d3.select(this).call(d3.axisLeft(yScales[dimension]).ticks(6)).append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"y\", -9).text(dimension).style(\"fill\", \"black\").style(\"font-size\", \"12px\");\n    });\n\n    // Add color scale legend\n    const legendHeight = height;\n    const legendWidth = 15;\n    const legendSvg = svg.append(\"g\").attr(\"transform\", `translate(${-margin.left + legendWidth + 20}, 0)`);\n    const gradient = legendSvg.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"color-gradient\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", \"0%\").attr(\"x2\", \"0%\").attr(\"y1\", \"100%\").attr(\"y2\", \"0%\");\n    const colorDomain = d3.extent(data, d => d[selectedDimensions[0]]);\n    const gradientSteps = 20;\n    const stepSize = (colorDomain[1] - colorDomain[0]) / gradientSteps;\n    for (let i = 0; i <= gradientSteps; i++) {\n      const value = colorDomain[0] + i * stepSize;\n      gradient.append(\"stop\").attr(\"offset\", `${i / gradientSteps * 100}%`).attr(\"stop-color\", colorScale(value));\n    }\n    legendSvg.append(\"rect\").attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#color-gradient)\");\n    const legendScale = d3.scaleLinear().domain(colorDomain).range([legendHeight, 0]);\n    legendSvg.append(\"g\").attr(\"transform\", `translate(${legendWidth}, 0)`).call(d3.axisLeft(legendScale).ticks(5));\n  }, [data, selectedDimensions]);\n  const toggleDimension = dimension => {\n    setSelectedDimensions(prev => {\n      if (prev.includes(dimension)) {\n        // Deselect the dimension\n        return prev.filter(d => d !== dimension);\n      } else {\n        // Reselect and place it back in the original order\n        const newSelection = [...prev, dimension];\n        return dimensions.filter(dim => newSelection.includes(dim));\n      }\n    });\n  };\n  const moveDimension = (fromIndex, toIndex) => {\n    setDimensions(prev => {\n      const updated = [...prev];\n      const [movedItem] = updated.splice(fromIndex, 1);\n      updated.splice(toIndex, 0, movedItem);\n      return updated;\n    });\n\n    // Sync selectedDimensions to respect the new order\n    setSelectedDimensions(prev => {\n      return dimensions.filter(dim => prev.includes(dim));\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Parallel Coordinates Plot...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 21\n  }, this);\n  if (!data.length || !dimensions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the Parallel Coordinates Plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"flex-start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: containerRef,\n        style: {\n          flex: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"200px\",\n          padding: \"10px\",\n          background: \"#f8f9fa\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Reorder & Toggle Dimensions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), dimensions.map((dimension, index) => /*#__PURE__*/_jsxDEV(DimensionItem, {\n          dimension: dimension,\n          index: index,\n          moveDimension: moveDimension,\n          toggleDimension: toggleDimension,\n          selected: selectedDimensions.includes(dimension)\n        }, dimension, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s2(ParallelCoordinatesPlot, \"s08GBYJx53TFkSmY9BEFCs3OKP4=\");\n_c2 = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n\n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//     const margin = { top: 30, right: 50, bottom: 10, left: 80 };\n//     const width = 1000 - margin.left - margin.right; // Increased width\n//     const height = 600 - margin.top - margin.bottom;\n\n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n\n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n\n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 2) // Increased line thickness\n//       .style(\"opacity\", 0.8);\n\n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n\n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(-60, 0)`); // Moved legend to the left\n\n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n\n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n\n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n\n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n\n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n\n//     const legendAxis = d3\n//       .axisLeft(legendScale) // Changed to axisLeft\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n\n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth + 5}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);\n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\nvar _c, _c2;\n$RefreshReg$(_c, \"DimensionItem\");\n$RefreshReg$(_c2, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","DndProvider","useDrag","useDrop","HTML5Backend","jsxDEV","_jsxDEV","DimensionItem","dimension","index","moveDimension","toggleDimension","selected","_s","ref","drop","accept","hover","item","isDragging","drag","type","collect","monitor","style","padding","margin","backgroundColor","color","cursor","opacity","borderRadius","textAlign","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","ParallelCoordinatesPlot","subspaceId","_s2","containerRef","data","setData","dimensions","setDimensions","selectedDimensions","setSelectedDimensions","loading","setLoading","error","setError","fetchData","Error","response","fetch","result","json","rawData","formattedData","Object","keys","map","_","i","fromEntries","entries","key","values","Number","err","message","length","select","current","selectAll","remove","append","attr","text","top","right","bottom","left","width","height","svg","yScales","forEach","scaleLinear","domain","extent","d","range","xScale","scalePoint","colorScale","scaleSequential","interpolatePlasma","paths","enter","line","on","raise","filter","p","__data__","each","call","axisLeft","ticks","legendHeight","legendWidth","legendSvg","gradient","colorDomain","gradientSteps","stepSize","value","legendScale","prev","includes","newSelection","dim","fromIndex","toIndex","updated","movedItem","splice","backend","display","alignItems","flex","background","border","marginLeft","_c2","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst DimensionItem = ({ dimension, index, moveDimension, toggleDimension, selected }) => {\n  const ref = useRef();\n\n  const [, drop] = useDrop({\n    accept: \"DIMENSION\",\n    hover(item) {\n      if (item.index !== index) {\n        moveDimension(item.index, index);\n        item.index = index;\n      }\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    type: \"DIMENSION\",\n    item: { index },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  drag(drop(ref));\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        padding: \"8px\",\n        margin: \"4px 0\",\n        backgroundColor: selected ? \"#007bff\" : \"#e0e0e0\",\n        color: selected ? \"#fff\" : \"#000\",\n        cursor: \"move\",\n        opacity: isDragging ? 0.5 : 1,\n        borderRadius: \"4px\",\n        textAlign: \"center\",\n      }}\n      onClick={() => toggleDimension(dimension)}\n    >\n      {dimension}\n    </div>\n  );\n};\n\nconst ParallelCoordinatesPlot = ({ subspaceId }) => {\n  const containerRef = useRef();\n  const [data, setData] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n        const response = await fetch(\n          `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n  \n        if (result.data) {\n          const rawData = result.data;\n  \n          const formattedData = Object.keys(\n            rawData[Object.keys(rawData)[0]]\n          ).map((_, i) =>\n            Object.fromEntries(\n              Object.entries(rawData).map(([key, values]) => [\n                key,\n                Number(values[i]) || 0,\n              ])\n            )\n          );\n  \n          setData(formattedData);\n          setDimensions(Object.keys(rawData));\n          setSelectedDimensions(Object.keys(rawData));\n        } else {\n          throw new Error(result.error || \"Failed to fetch data.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchData();\n  }, [subspaceId]);\n  \n  useEffect(() => {\n    if (!data.length) return;\n  \n    // Clear the container\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n  \n    if (!selectedDimensions.length) {\n      // Show message when no dimensions are selected\n      d3.select(containerRef.current)\n        .append(\"text\")\n        .attr(\"x\", 200)\n        .attr(\"y\", 200)\n        .style(\"font-size\", \"16px\")\n        .text(\"No dimensions selected. Please select at least one.\");\n      return;\n    }\n  \n    const margin = { top: 30, right: 80, bottom: 10, left: 100 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n  \n    const svg = d3\n      .select(containerRef.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n    // Define y-scales for each dimension\n    const yScales = {};\n    selectedDimensions.forEach((dimension) => {\n      yScales[dimension] = d3\n        .scaleLinear()\n        .domain(d3.extent(data, (d) => d[dimension]))\n        .range([height, 0]);\n    });\n  \n    // Define x-scale for the dimensions\n    const xScale = d3\n      .scalePoint()\n      .domain(selectedDimensions)\n      .range([0, width])\n      .padding(0.5);\n  \n    // Define color scale based on the first selected dimension\n    const colorScale = d3\n      .scaleSequential(d3.interpolatePlasma)\n      .domain(d3.extent(data, (d) => d[selectedDimensions[0]]));\n  \n    // Draw the paths for each data point\n    const paths = svg\n      .append(\"g\")\n      .selectAll(\".path\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", (d) =>\n        d3.line()(\n          selectedDimensions.map((dimension) => [\n            xScale(dimension),\n            yScales[dimension](d[dimension]),\n          ])\n        )\n      )\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", (d) => colorScale(d[selectedDimensions[0]]))\n      .style(\"stroke-width\", 2)\n      .style(\"opacity\", 0.7);\n  \n    // Interactive highlighting\n    paths\n      .on(\"mouseover\", function () {\n        d3.select(this)\n          .raise()\n          .style(\"stroke-width\", 4)\n          .style(\"opacity\", 1);\n  \n        paths\n          .filter((p) => p !== this.__data__)\n          .style(\"opacity\", 0.1);\n      })\n      .on(\"mouseout\", function () {\n        d3.select(this).style(\"stroke-width\", 2).style(\"opacity\", 0.7);\n  \n        paths.style(\"opacity\", 0.7);\n      });\n  \n    // Add axis and labels for each dimension\n    svg\n      .selectAll(\".dimension\")\n      .data(selectedDimensions)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"dimension\")\n      .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n      .each(function (dimension) {\n        d3.select(this)\n          .call(d3.axisLeft(yScales[dimension]).ticks(6))\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", -9)\n          .text(dimension)\n          .style(\"fill\", \"black\")\n          .style(\"font-size\", \"12px\");\n      });\n  \n    // Add color scale legend\n    const legendHeight = height;\n    const legendWidth = 15;\n  \n    const legendSvg = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${-margin.left + legendWidth + 20}, 0)`);\n  \n    const gradient = legendSvg\n      .append(\"defs\")\n      .append(\"linearGradient\")\n      .attr(\"id\", \"color-gradient\")\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"x2\", \"0%\")\n      .attr(\"y1\", \"100%\")\n      .attr(\"y2\", \"0%\");\n  \n    const colorDomain = d3.extent(data, (d) => d[selectedDimensions[0]]);\n    const gradientSteps = 20;\n    const stepSize = (colorDomain[1] - colorDomain[0]) / gradientSteps;\n  \n    for (let i = 0; i <= gradientSteps; i++) {\n      const value = colorDomain[0] + i * stepSize;\n      gradient\n        .append(\"stop\")\n        .attr(\"offset\", `${(i / gradientSteps) * 100}%`)\n        .attr(\"stop-color\", colorScale(value));\n    }\n  \n    legendSvg\n      .append(\"rect\")\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#color-gradient)\");\n  \n    const legendScale = d3\n      .scaleLinear()\n      .domain(colorDomain)\n      .range([legendHeight, 0]);\n  \n    legendSvg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${legendWidth}, 0)`)\n      .call(d3.axisLeft(legendScale).ticks(5));\n  }, [data, selectedDimensions]);\n  \n\n  const toggleDimension = (dimension) => {\n    setSelectedDimensions((prev) => {\n      if (prev.includes(dimension)) {\n        // Deselect the dimension\n        return prev.filter((d) => d !== dimension);\n      } else {\n        // Reselect and place it back in the original order\n        const newSelection = [...prev, dimension];\n        return dimensions.filter((dim) => newSelection.includes(dim));\n      }\n    });\n  };\n  \n  const moveDimension = (fromIndex, toIndex) => {\n    setDimensions((prev) => {\n      const updated = [...prev];\n      const [movedItem] = updated.splice(fromIndex, 1);\n      updated.splice(toIndex, 0, movedItem);\n      return updated;\n    });\n  \n    // Sync selectedDimensions to respect the new order\n    setSelectedDimensions((prev) => {\n      return dimensions.filter((dim) => prev.includes(dim));\n    });\n  };  \n\n  if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!data.length || !dimensions.length) {\n    return <div>No data available for the Parallel Coordinates Plot.</div>;\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\n        <div ref={containerRef} style={{ flex: 1 }}></div>\n        <div\n          style={{\n            width: \"200px\",\n            padding: \"10px\",\n            background: \"#f8f9fa\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            marginLeft: \"10px\",\n          }}\n        >\n          <h3>Reorder & Toggle Dimensions</h3>\n          {dimensions.map((dimension, index) => (\n            <DimensionItem\n              key={dimension}\n              dimension={dimension}\n              index={index}\n              moveDimension={moveDimension}\n              toggleDimension={toggleDimension}\n              selected={selectedDimensions.includes(dimension)}\n            />\n          ))}\n        </div>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default ParallelCoordinatesPlot;\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const containerRef = useRef();\n//   const [data, setData] = useState([]);\n//   const [dimensions, setDimensions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         if (!subspaceId) throw new Error(\"Subspace ID is missing.\");\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           const rawData = result.data;\n\n//           const formattedData = Object.keys(\n//             rawData[Object.keys(rawData)[0]]\n//           ).map((_, i) =>\n//             Object.fromEntries(\n//               Object.entries(rawData).map(([key, values]) => [\n//                 key,\n//                 Number(values[i]) || 0,\n//               ])\n//             )\n//           );\n\n//           setData(formattedData);\n//           setDimensions(Object.keys(rawData));\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   useEffect(() => {\n//     if (!data.length || !dimensions.length) return;\n\n//     d3.select(containerRef.current).selectAll(\"*\").remove();\n\n//     const margin = { top: 30, right: 50, bottom: 10, left: 80 };\n//     const width = 1000 - margin.left - margin.right; // Increased width\n//     const height = 600 - margin.top - margin.bottom;\n\n//     const svg = d3\n//       .select(containerRef.current)\n//       .append(\"svg\")\n//       .attr(\"width\", width + margin.left + margin.right)\n//       .attr(\"height\", height + margin.top + margin.bottom)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n//     const yScales = {};\n//     dimensions.forEach((dimension) => {\n//       yScales[dimension] = d3\n//         .scaleLinear()\n//         .domain(d3.extent(data, (d) => d[dimension]))\n//         .range([height, 0]);\n//     });\n\n//     const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n//     const colorScale = d3\n//       .scaleSequential(d3.interpolateViridis)\n//       .domain(d3.extent(data, (d) => d[dimensions[0]]));\n\n//     svg\n//       .selectAll(\".dimension\")\n//       .data(dimensions)\n//       .enter()\n//       .append(\"g\")\n//       .attr(\"class\", \"dimension\")\n//       .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n//       .each(function (dimension) {\n//         d3.select(this)\n//           .call(d3.axisLeft(yScales[dimension]).ticks(6))\n//           .append(\"text\")\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"y\", -9)\n//           .text(dimension)\n//           .style(\"fill\", \"black\")\n//           .style(\"font-size\", \"12px\");\n//       });\n\n//     svg\n//       .append(\"g\")\n//       .selectAll(\".path\")\n//       .data(data)\n//       .enter()\n//       .append(\"path\")\n//       .attr(\"d\", (d) =>\n//         d3.line()(\n//           dimensions.map((dimension) => [\n//             xScale(dimension),\n//             yScales[dimension](d[dimension]),\n//           ])\n//         )\n//       )\n//       .style(\"fill\", \"none\")\n//       .style(\"stroke\", (d) => colorScale(d[dimensions[0]]))\n//       .style(\"stroke-width\", 2) // Increased line thickness\n//       .style(\"opacity\", 0.8);\n\n//     // Legend setup\n//     const legendWidth = 10;\n//     const legendHeight = 560;\n\n//     const legendSvg = svg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(-60, 0)`); // Moved legend to the left\n\n//     const gradient = legendSvg\n//       .append(\"defs\")\n//       .append(\"linearGradient\")\n//       .attr(\"id\", \"color-gradient\")\n//       .attr(\"gradientUnits\", \"userSpaceOnUse\")\n//       .attr(\"x1\", \"0%\")\n//       .attr(\"x2\", \"0%\")\n//       .attr(\"y1\", \"100%\")\n//       .attr(\"y2\", \"0%\");\n\n//     const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n//     const gradientSteps = 5;\n//     const stepSize = (colorDomain[1] - colorDomain[0]) / (gradientSteps - 1);\n\n//     for (let i = 0; i < gradientSteps; i++) {\n//       const value = colorDomain[0] + i * stepSize;\n//       gradient\n//         .append(\"stop\")\n//         .attr(\"offset\", `${(i / (gradientSteps - 1)) * 100}%`)\n//         .attr(\"stop-color\", colorScale(value));\n//     }\n\n//     legendSvg\n//       .append(\"rect\")\n//       .attr(\"width\", legendWidth)\n//       .attr(\"height\", legendHeight)\n//       .style(\"fill\", \"url(#color-gradient)\");\n\n//     const legendScale = d3\n//       .scaleLinear()\n//       .domain(colorDomain)\n//       .range([legendHeight, 0]);\n\n//     const legendAxis = d3\n//       .axisLeft(legendScale) // Changed to axisLeft\n//       .ticks(6)\n//       .tickFormat(d3.format(\".1f\"));\n\n//     legendSvg\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${legendWidth + 5}, 0)`)\n//       .call(legendAxis);\n//   }, [data, dimensions]);\n\n//   if (loading) return <div>Loading Parallel Coordinates Plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n//   if (!data.length || !dimensions.length) {\n//     return <div>No data available for the Parallel Coordinates Plot.</div>;\n//   }\n\n//   return (\n//     <div>\n//       <div ref={containerRef}></div>\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}