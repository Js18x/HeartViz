{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelCoordinatesPlot = ({\n  subspaceId\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`);\n        const result = await response.json();\n        if (result.data) {\n          setData(result.data);\n        } else {\n          throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [subspaceId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading parallel coordinates plot...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 21\n  }, this);\n  if (!data || Object.keys(data).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the parallel coordinates plot.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract data for the parallel coordinates plot\n  const dimensions = Object.keys(data).map(key => ({\n    label: key,\n    values: data[key]\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Parallel Coordinates Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: \"parcoords\",\n        dimensions,\n        line: {\n          color: data[Object.keys(data)[0]],\n          // Use the first feature for line coloring\n          colorscale: \"Viridis\",\n          showscale: true,\n          width: 5 // Set the line thickness here\n        }\n      }],\n      layout: {\n        title: \"Parallel Coordinates Plot\",\n        width: 1000,\n        height: 600\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ParallelCoordinatesPlot, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useState","useEffect","Plot","jsxDEV","_jsxDEV","ParallelCoordinatesPlot","subspaceId","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","result","json","Error","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","dimensions","map","key","label","values","type","line","color","colorscale","showscale","width","layout","title","height","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nconst ParallelCoordinatesPlot = ({ subspaceId }) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\n          `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n        );\n        const result = await response.json();\n\n        if (result.data) {\n          setData(result.data);\n        } else {\n          throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n        }\n      } catch (err) {\n        setError(err.message || \"An unknown error occurred.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [subspaceId]);\n\n  if (loading) return <div>Loading parallel coordinates plot...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  if (!data || Object.keys(data).length === 0) {\n    return <div>No data available for the parallel coordinates plot.</div>;\n  }\n\n  // Extract data for the parallel coordinates plot\n  const dimensions = Object.keys(data).map((key) => ({\n    label: key,\n    values: data[key],\n  }));\n\n  return (\n    <div>\n      <h1>Parallel Coordinates Plot</h1>\n      <Plot\n        data={[\n          {\n            type: \"parcoords\",\n            dimensions,\n            line: {\n              color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n              colorscale: \"Viridis\",\n              showscale: true,\n              width: 5, // Set the line thickness here\n            },\n          },\n        ]}\n        layout={{\n          title: \"Parallel Coordinates Plot\",\n          width: 1000,\n          height: 600,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ParallelCoordinatesPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}