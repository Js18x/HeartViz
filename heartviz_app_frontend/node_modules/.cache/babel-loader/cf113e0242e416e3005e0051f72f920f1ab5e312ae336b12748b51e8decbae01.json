{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParallelCoordinatesPlot = ({\n  data,\n  dimensions\n}) => {\n  _s();\n  const containerRef = useRef();\n  useEffect(() => {\n    if (!data || !dimensions) return;\n\n    // Clear existing content\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n    const margin = {\n      top: 30,\n      right: 50,\n      bottom: 10,\n      left: 50\n    };\n    const width = 900 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n    const svg = d3.select(containerRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales for each dimension\n    const yScales = {};\n    dimensions.forEach(dimension => {\n      yScales[dimension] = d3.scaleLinear().domain(d3.extent(data, d => d[dimension])).range([height, 0]);\n    });\n\n    // Create x scale for dimensions\n    const xScale = d3.scalePoint().domain(dimensions).range([0, width]);\n\n    // Line color scale\n    const colorScale = d3.scaleSequential(d3.interpolateViridis).domain(d3.extent(data, d => d[dimensions[0]])); // Color based on the first dimension\n\n    // Draw axes for each dimension\n    svg.selectAll(\".dimension\").data(dimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", d => `translate(${xScale(d)})`).each(function (dimension) {\n      d3.select(this).call(d3.axisLeft(yScales[dimension]).ticks(6)) // Add ticks\n      .append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"y\", -15).text(dimension).style(\"fill\", \"black\").style(\"font-size\", \"12px\");\n    });\n\n    // Draw parallel coordinate lines\n    svg.append(\"g\").selectAll(\".path\").data(data).enter().append(\"path\").attr(\"d\", d => d3.line()(dimensions.map(dimension => [xScale(dimension), yScales[dimension](d[dimension])]))).style(\"fill\", \"none\").style(\"stroke\", d => colorScale(d[dimensions[0]])) // Line color based on the first dimension\n    .style(\"stroke-width\", 1.5).style(\"opacity\", 0.8);\n\n    // Add color legend\n    const legendWidth = 10;\n    const legendHeight = 200;\n    const legendMargin = {\n      top: 10,\n      bottom: 10\n    };\n    const legendSvg = svg.append(\"g\").attr(\"transform\", `translate(${width + 20}, 0)`);\n    const gradient = legendSvg.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"color-gradient\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", \"0%\").attr(\"x2\", \"0%\").attr(\"y1\", \"0%\").attr(\"y2\", \"100%\");\n    gradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", d3.interpolateViridis(1));\n    gradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", d3.interpolateViridis(0));\n    legendSvg.append(\"rect\").attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#color-gradient)\");\n    const colorDomain = d3.extent(data, d => d[dimensions[0]]);\n    const legendScale = d3.scaleLinear().domain(colorDomain).range([0, legendHeight]);\n    const legendAxis = d3.axisRight(legendScale).ticks(6).tickFormat(d3.format(\".1f\"));\n    legendSvg.append(\"g\").attr(\"transform\", `translate(${legendWidth}, 0)`).call(legendAxis);\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 12\n  }, this);\n};\n_s(ParallelCoordinatesPlot, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ParallelCoordinatesPlot;\nexport default ParallelCoordinatesPlot;\nvar _c;\n$RefreshReg$(_c, \"ParallelCoordinatesPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ParallelCoordinatesPlot","data","dimensions","_s","containerRef","select","current","selectAll","remove","margin","top","right","bottom","left","width","height","svg","append","attr","yScales","forEach","dimension","scaleLinear","domain","extent","d","range","xScale","scalePoint","colorScale","scaleSequential","interpolateViridis","enter","each","call","axisLeft","ticks","text","style","line","map","legendWidth","legendHeight","legendMargin","legendSvg","gradient","colorDomain","legendScale","legendAxis","axisRight","tickFormat","format","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/js/Desktop/HeartViz/heartviz_app_frontend/src/components/parallelPlot/parallelPlot.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\n\n// const ParallelCoordinatesPlot = ({ subspaceId }) => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://127.0.0.1:5000/fetch_data_with_features?sub_ind=${subspaceId}`\n//         );\n//         const result = await response.json();\n\n//         if (result.data) {\n//           setData(result.data);\n//         } else {\n//           throw new Error(result.error || \"Failed to fetch data for the parallel plot.\");\n//         }\n//       } catch (err) {\n//         setError(err.message || \"An unknown error occurred.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [subspaceId]);\n\n//   if (loading) return <div>Loading parallel coordinates plot...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   if (!data || Object.keys(data).length === 0) {\n//     return <div>No data available for the parallel coordinates plot.</div>;\n//   }\n\n//   // Extract data for the parallel coordinates plot\n//   const dimensions = Object.keys(data).map((key) => ({\n//     label: key,\n//     values: data[key],\n//   }));\n\n//   return (\n//     <div>\n//       <h1>Parallel Coordinates Plot</h1>\n//       <Plot\n//         data={[\n//           {\n//             type: \"parcoords\",\n//             dimensions,\n//             line: {\n//               color: data[Object.keys(data)[0]], // Use the first feature for line coloring\n//               colorscale: \"Viridis\",\n//               showscale: true,\n//               width: 100, // Set the line thickness here\n//             },\n//           },\n//         ]}\n//         layout={{\n//           title: \"Parallel Coordinates Plot\",\n//           width: 1200,\n//           height: 700,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default ParallelCoordinatesPlot;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst ParallelCoordinatesPlot = ({ data, dimensions }) => {\n    const containerRef = useRef();\n\n    useEffect(() => {\n        if (!data || !dimensions) return;\n\n        // Clear existing content\n        d3.select(containerRef.current).selectAll(\"*\").remove();\n\n        const margin = { top: 30, right: 50, bottom: 10, left: 50 };\n        const width = 900 - margin.left - margin.right;\n        const height = 500 - margin.top - margin.bottom;\n\n        const svg = d3\n            .select(containerRef.current)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Create scales for each dimension\n        const yScales = {};\n        dimensions.forEach((dimension) => {\n            yScales[dimension] = d3\n                .scaleLinear()\n                .domain(d3.extent(data, (d) => d[dimension]))\n                .range([height, 0]);\n        });\n\n        // Create x scale for dimensions\n        const xScale = d3\n            .scalePoint()\n            .domain(dimensions)\n            .range([0, width]);\n\n        // Line color scale\n        const colorScale = d3\n            .scaleSequential(d3.interpolateViridis)\n            .domain(d3.extent(data, (d) => d[dimensions[0]])); // Color based on the first dimension\n\n        // Draw axes for each dimension\n        svg.selectAll(\".dimension\")\n            .data(dimensions)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"dimension\")\n            .attr(\"transform\", (d) => `translate(${xScale(d)})`)\n            .each(function (dimension) {\n                d3.select(this)\n                    .call(d3.axisLeft(yScales[dimension]).ticks(6)) // Add ticks\n                    .append(\"text\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"y\", -15)\n                    .text(dimension)\n                    .style(\"fill\", \"black\")\n                    .style(\"font-size\", \"12px\");\n            });\n\n        // Draw parallel coordinate lines\n        svg.append(\"g\")\n            .selectAll(\".path\")\n            .data(data)\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", (d) =>\n                d3.line()(\n                    dimensions.map((dimension) => [\n                        xScale(dimension),\n                        yScales[dimension](d[dimension]),\n                    ])\n                )\n            )\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", (d) => colorScale(d[dimensions[0]])) // Line color based on the first dimension\n            .style(\"stroke-width\", 1.5)\n            .style(\"opacity\", 0.8);\n\n        // Add color legend\n        const legendWidth = 10;\n        const legendHeight = 200;\n        const legendMargin = { top: 10, bottom: 10 };\n\n        const legendSvg = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${width + 20}, 0)`);\n\n        const gradient = legendSvg\n            .append(\"defs\")\n            .append(\"linearGradient\")\n            .attr(\"id\", \"color-gradient\")\n            .attr(\"gradientUnits\", \"userSpaceOnUse\")\n            .attr(\"x1\", \"0%\")\n            .attr(\"x2\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"y2\", \"100%\");\n\n        gradient\n            .append(\"stop\")\n            .attr(\"offset\", \"0%\")\n            .attr(\"stop-color\", d3.interpolateViridis(1));\n        gradient\n            .append(\"stop\")\n            .attr(\"offset\", \"100%\")\n            .attr(\"stop-color\", d3.interpolateViridis(0));\n\n        legendSvg\n            .append(\"rect\")\n            .attr(\"width\", legendWidth)\n            .attr(\"height\", legendHeight)\n            .style(\"fill\", \"url(#color-gradient)\");\n\n        const colorDomain = d3.extent(data, (d) => d[dimensions[0]]);\n        const legendScale = d3\n            .scaleLinear()\n            .domain(colorDomain)\n            .range([0, legendHeight]);\n\n        const legendAxis = d3\n            .axisRight(legendScale)\n            .ticks(6)\n            .tickFormat(d3.format(\".1f\"));\n\n        legendSvg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${legendWidth}, 0)`)\n            .call(legendAxis);\n    }, [data, dimensions]);\n\n    return <div ref={containerRef}></div>;\n};\n\nexport default ParallelCoordinatesPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}